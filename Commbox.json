{
  "openapi": "3.0.3",
  "tags": [
    {
      "name": "Core",
      "description": "<br><br>Systemwide verification"
    },
    {
      "name": "Objects",
      "description": "<br><br>Objects are conversations between the bot or the agent and the customers, where each segment of the conversation is referred to as a Child. Every conversation must have a designated Stream – a communication channel such as Chat, Email, Text/SMS, etc., that hosts the conversation.<br>The Object APIs category concentrates on a specific conversation, where the Stream is part of the identifying parameters. In the Streams APIs category, the Channel is the focal point of the request, and the objects and users are the filtering aspects."
    },
    {
      "name": "Streams",
      "description": "<br><br>Streams are communication channels used in CommBox, such as Chat, WhatsApp, SMS/Text, etc. In the Streams category of APIs, the channel is the focal point of the request, and the objects and users are the filtering aspects. See the Enums Section for available channels and their CommBox code."
    },
    {
      "name": "Tags",
      "description": "<br><br>Tags are a classification tool for summarizing aspects of the conversation or the user. It can mark the conversation to indicate a new sale or identify a customer as not interested in the product. To help manage the Tags assets, Tags can be grouped with a common identifier."
    },
    {
      "name": "SMS",
      "description": "<br><br>Sending customers **SMS messages** (Texting) requires an initial opt-in step, which is not offered by CommBox and is the sole responsibility of the sending entity (Business)."
    },
    {
      "name": "WhatsApp",
      "description": "<br><br>CommBox facilitates activities in **WABA** for the clients. Our platform helps clients create new templates and manage existing ones.<br><br> **Opt-in for WhatsApp**<br> Before sending WhatsApp messages to someone, you must first receive opt-in permission confirming that they wish to receive future messages from you on WhatsApp. This can be done using any channel your business uses to communicate with people — your website, app, email, retail location, etc.</br><ul><li>The opt-in must be an active opt-in, which means it must be triggered by a user action, such as entering a phone number or checking a box to indicate consent.</br><li>The opt-in must clearly state your business’ name.</br><li>Clear opt-in messaging so that the customers know what type(s) of messaging they are signing up for.<br>For more information, please visit: https://developers.facebook.com/docs/whatsapp/guides/opt-in/"
    },
    {
      "name": "Users",
      "description": "<br><br><br><br>**Users** are people recorded in CommBox and they include both the business side and the customers.<br>Managers are APIs that deal with the business personas such as Admins, Agents, Team leaders, etc., and they include **Profiles**, **Presence**, **Assignments**, **Notifications**, and **Teams** sub-categories.<br><br>General USERS"
    },
    {
      "name": "Managers",
      "description": "<br><br>The **MANAGERS** APIs category relates to activities involving the Admins, Team Leaders, Agents, and any other business-related persona. This category includes **Profiles**, **Presence**, **Assignments**, **Notifications**, and **Teams** sub-categories."
    },
    {
      "name": "Profiles",
      "description": "<br><br>**Profiles** relate to system permissions and enabled activities assigned to a group of agents (managers). <br>When looking for a specific user, the USER ID is required. <br>The profile ID is required when selecting a specific profile (See Enum section)."
    },
    {
      "name": "Presence",
      "description": "<br><br>The Presence APIs relate to the agent availability status. Active and ready for assignment, Busy, or Away from the desk. Additional statuses can be created by the admin."
    },
    {
      "name": "Assignments",
      "description": "<br><br>The **Assignments** category relates to conversations (Objects) assigned to a specific agent."
    },
    {
      "name": "Teams",
      "description": "A Team is a group of agents with specific business agendas, roles, and permissions. Admins and Team Managers can set up Team Managers to create and manage teams and give those teams specific inbox filters, tags, and knowledge-based assets."
    },
    {
      "name": "Automation",
      "description": "<br><br>Automation APIs are related to bot capabilities."
    }
  ],
  "info": {
    "title": "CommBox API",
    "x-logo": {
      "url": "https://www.commbox.io/logo/commbox_logo_large.png"
    },
    "description": "\n# About CommBox\n## Overview\nCommBox redefines the way businesses interact with their customers by providing seamless interactions between different communication modalities, deep integration with customer relations management platforms, and innovative business solutions to improve agents’ productivity and service abilities, all while saving time by reducing manual efforts via our automation.\n\nThis document provides the information needed for developers to use CommBox’s resources, whether server-based or client-side.\n\nThe CommBox Developers platform lets you access CommBox data and functionality using code instead of the user interface.</br></br> \nFor example, you can use the platform to:\n* Create a new agent and assign that agent to a specific team.\n* Create a WhatsApp template. \n* Send follow-up SMS/text reminders. \n* Receive Webhooks based on pre-set triggers in CommBox.</br></br>\n\n ## CommBox Omnichannel Structure\n\n<img src=\"https://www.commbox.io/wp-content/uploads/2025/04/CommBox-Structure.png\">\n# Security and Authentication\n## Overview\nThe CommBox REST API is served over HTTPS, and unencrypted HTTP is not supported to ensure data privacy.</br>In addition, all requests are required to pass Bearer Token (BearerAuth) for authentication, where the token is predetermined and provided by CommBox.\n\nAll requests are logged and validated. \n\nAll parameters **must** be URL-encoded.\n\n* **Security Scheme Type**:  HTTPS\n\n* **HTTP Authorization Scheme**:  bearer\n\n## Obtaining an API Key / Access Token\n\n**Note**: **Admin** privileges are required in order to obtain the **Access Token / API Key**.\n\n**A Bearer Token must be set in the Authorization header of every API call.**\n\nIn the CommBox console, navigate to **Settings** > **API** (in the Settings & Features section): \n1. Click the **View** icon next to the API Key.\n2. Click the **Copy** icon on the right.\n3. At the request Authorization tab, select Bearer Token from the Type dropdown list.\n4. At the Token field, paste your Access Token / API Key value. \n\n**Warning**: API tokens can pose a security risk to your organization if used by an unauthorized person. Make sure to keep them secure. Delete old keys and replace them in your system if you suspect any security breach.\n\n## Replacing/Rotating API Tokens\n\nAPI Keys rotate automatically in a pre-set schedule. To reset that schedule or obtain a new key, follow the steps below:</br>\n\n1. Navigate to **Settings** > **API**.\n2. Click the **Revoke** icon at the far right of the existing API Key.\n   A new dialog box will inform you have a 30-day grace period to replace the old key with the new one. Click the **Revoke Key** button.\n3. At the new dialog box, determine how long the new key will be active. You may copy it to other locations from there or do so later within your 30-day grace period.\n4. Finish the process by clicking **Done**.</br> The New API key is displayed above the old one. After 30 days, the old API key will expire.\n5. You may delete the **Revoked/Expired** key by clicking the Trash Bin icon.<br><br>\n<img src=\"https://www.commbox.io/wp-content/uploads/2025/04/revoke-API-Key.png\">\n\n\n\n\n## Obtaining a STREAM ID\nA **STREAM ID** is required for every communication channel (Chat, WhatsApp, etc.).  \n If you don’t know the Stream ID, substitute it with the encrypted version (called StreamProviderId):  \n1. At the CommBox console, navigate to **Settings** and select the communication channel.\n2. Click on the communication channel of your choice from the listed channels. The ID number issued by CommBox is right underneath the channel name. \n3. Place this code wherever you see the **{STREAM_ID}** section of the API. \n\n   Example:\n \n    https://api.commbox.io/streams/{STREAM_ID}/objects \n    \n    https://api.commbox.io/streams/hNyRN_fLUy7rrOrN9jLpipA%3d%3d/objects\n \n\n\n <img src=\"https://www.commbox.io/wp-content/uploads/2025/04/Stream-Id-encrypted.png\">\n \n # Authentication Modules\nCommBox offers several options for authentication and silent login into our systems in addition to our standard user/password login process.\n## Directory Services\nWe allow a login for our management site using Directory Services (DS) providers (such as Active Directory).\n\nTo set it up, the **Single Sign-On module** must be active, and the domain, username, and password (optional) must be set in the Module Settings tab. Furthermore, every user who wishes to log in using Directory Services must also set the Username field on the Users Management page.\n\nOnce configured, the system will try to validate the username and password fields inputted on the login page against the DS server. If successful, the user will be automatically signed into the system. Otherwise, the system will try to validate the user/password field using the standard CommBox credentials.\n## Ticket Authentication\nOur authentication system allows users to log in to the management site and chat application using a custom-signed ticket. This ticket is generated through our  <a href=\"api/#tag/Ticket\" title=\"title\">Ticket API</a> by providing the necessary query parameters. Upon successful request, the API returns a session cookie (ticket) that can be appended to the login URL or Chat login URL to facilitate authentication.<br><br>**Note:**<br> To log in to our management site, the ticket must include the business account name (brand), an active username (of an agent), and a strong identifier (email or phone number).<br><br>To log in to our app as a customer, tickets must include the business account name (brand), the channel code, and all the body parameters needed for that specific app. (FirstName, LastName, Phone, email address, etc.)\n  \n# CommBox REST APIs\n## Overview\nCommBox utilizes the REST APIs principles, allowing developers to perform queries to the CommBox platform. We support GET, POST, and DELETE requests.\nUse a **Get** request to retrieve information, a **POST** to create or update an entity, and a **DELETE** to remove an entity.   \nAfter receiving the request, the API sends back an HTTP code as a response in JSON format.\n\n\n\n## Structure and Examples\n### Access Token \nAll API requests require an Access Token to validate authenticity to indicate to the system what modules, operations, and resources the user can access. See more detailed information in the Security and Authentication section of this documentation.\n\n### Base URI \nAll URLs referenced in the documentation have the following base: [https://api.commbox.io](https://api.commbox.io)\n\n\n### Request\n\n* The request must include the **module** and **operation** in the URI.</br>\nFor example, to access an operation called **SystemStatus** in the **Core** module, make an HTTP request to –\n</br><span style=\"background-color: #f1f1f1\">/Core/SystemStatus</span></br></br>\n\n* To receive specific information regarding a resource, use the provided parameters in the URI. </br>\nFor example, to access a specific user data in the Core module, make an HTTP GET request to –\n</br><span style=\"background-color: #f1f1f1\">/Users/{USER_ID}/Details</span></br></br>\n\n* To change a resource, use an HTTP POST request to the resource URI.</br>\nFor example, to change a specific user name in the Core module, make an HTTP POST request to –\n</br><span style=\"background-color: #f1f1f1\">POST /Users/{USER_ID}/Details</span></br> \nAnd include the post parameter\n</br><span style=\"background-color: #f1f1f1\">data={\\\"FirstName\\\":\\\"FIRSTNAME\\\", \\\"LastName\\\":\\\"LASTNAME\\\"}\n</span></br></br>\n\n* To delete a resource, use an HTTP DELETE request to the resource URI.</br>\nFor example, to change a specific user name in the Core module, make an HTTP DELETE request to –\n</br><span style=\"background-color: #f1f1f1\">DELETE  /Users/{USER_ID}/</span></br></br>\n\n\n### Response\n\nProperty  | Description\n------------- | -------------\nstatus  | The HTTP status code for the response\ndescription  | A more informative message\nresponse_time | UTC Timestamp for the operation\ndata | (Optional) Additional output data, varies by operation\n\n<br>\n\n### Possible Response Status Codes\n\nStatus Code  | Description | Notes\n------------- | ------------- | -\n200  | OK | The request was successful\n400  | Bad Request | The request could not be understood by the server. Incoming parameters might not be valid\n401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource\n404 | Not Found | The requested resource is not found\n429  | Too Many Requests | Too many requests have been made in a short period of time (Throttling)\n500 | Server Error | The server could not return the representation due to an internal server error\n501 | Not Implemented | The requested operation is not supported (e.g. supports GET but not POST etc.)\n\n### API Calls Examples\nOur various API can be found under the <a href=\"/api#tag/Core\" title=\"title\">\"API Calls Section\"</a>  \n\n# Webhooks\n## Overview\nA webhook sends an HTTP POST request to a specified URL responding to a trigger (an “event”) in CommBox.\nFor example, every time a new user is created or deleted, CommBox will send a notification to the callback URL provided by the client. The webhook system of notification and updates eliminates continuous or periodic requests when changes haven’t occurred.\n\n**Note:** We strongly recommend using an HTTPS callback URL with a strong encrypted certificate.\n\nTo register for this service, contact your CommBox CS. \n\n## Webhook Structure \nAll updates contain a wrapper called “Event,” which indicates the subscription source and name of the trigger event. Inside the wrapper will be the actual data relevant to this update.\n\n**Note:** Notifications can be transferred as XML objects. \n\n ### Xml Example\n For a new object that was received on commbox’s servers, an “OnNew” event will be triggered and posted to the client callback URL:\n \n    <Event Subscription=\"Object\" Name=\"OnNew\">\n      <Object Id=\"123456\" StreamId=\"1\" SubStreamId=\"1\" Type=\"0\" StatusID=\"1\" CreateDate=\"2024-09-23 12:39:11\">\n      <Message>New status from facebook, Hello world!</Message>\n      <Content>{\"num_likes\":5,\"user_likes\":false,\"num_shares\":2}</Content>\n        <User Id=\"123\" UniqueID=\"123\" Phone1=\"972526444555\" Phone2=\"\" Email=\"yuval@gmail.com\" FirstName=\"Yuval\"\n         LastName=\"Hakim\" Gender=\"M\" NumIdentities=\"3\" Locale=\"en_US\" Birthday=\"1951-10-10\"\n         Remarks=\"User remarks\">\n          <Identity Id=\"12345\" StreamProviderId=\"11111111\" StreamProviderType=\"1\"\n           StreamProviderEmail=\"yuval@gmail.com\" UserName=\"yuvalh\" FirstName=\"Yuval\"\n           LastName=\"Hakim\" ThumbnailUrl=\"//graph.facebook.com/11111111/picture\" NumObjects=\"13\">\n          </Identity>\n        </User>\n      </Object>\n    </Event>\n\n## Object Events Subscriptions\n### OnNew\nThis event is triggered by creating a new object (conversation).</br></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNew\" Brand=\"commbox\">\n      <Object Id=\"123456\" StreamId=\"1\" SubStreamId=\"1\" Type=\"5\"\n      StatusID=\"1\" CreateDate=\"2024-09-23 12:39:11\"\n      StreamProviderId=\"CAEooBmqRVHRrfRmOcCSzSsYMUHUu5NY+NA@mail.gmail.com\" StreamProviderType=\"Mail\">\n      <Message>New status from facebook, Hello world!</Message>\n      <Content>{\"num_likes\":5,\"user_likes\":false,\"num_shares\":2}</Content>\n      <ManagerId>0</ManagerId>\n      <Snippet>Hello</Snippet>\n        <User Id=\"123\" UniqueID=\"123\" Phone1=\"972501111111\" Phone2=\"\"\n        Email=\"yuval@gmail.com\" FirstName=\"Yuval\" LastName=\"Hakim\"\n        Gender=\"M\" NumIdentities=\"3\" Locale=\"en_US\" Birthday=\"1951-10\n        10\" Remarks=\"User remarks\" NumObjects=\"13\">\n        <Content>{}</Content>\n          <Identity Id=\"12345\" StreamProviderId=\"11111111\"\n          StreamProviderType=\"1\"\n          StreamProviderEmail=\"yuval@gmail.com\"\n          UserName=\"yuvalh\" FirstName=\"Yuval\" LastName=\"Hakim\"\n          ThumbnailUrl=\"//graph.facebook.com/11111111/picture\">\n          </Identity>\n        </User>\n      </Object>\n    </Event>\n\n### OnNewChild\nThis event is triggered by creating a new child object (message in a conversation).</br></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewChild\" Brand=\"commbox\">\n      <Object Id=\"901730\" StreamId=\"71\" SubStreamId=\"0\">\n        <Children>\n          <Child Id=\"2099753\" CreateDate=\"26-03-2017 06:36:15\" \n          Type=\"0\" StreamProviderId=\"CAEooBmqRVHRrfRm5NY+NA@mail.gmail.com\" StreamProviderType=\"Mail\">\n          <Message>Hello</Message>\n          <ManagerId>0</ManagerId>\n          <Content>{\"sessionId\":133}</Content>\n          <Snippet>Hello</Snippet>\n            <User Id=\"1798715\" Phone1=\"97243434343\" Phone2=\"\" \n            UniqueID=\"\" Email=\"\" FirstName=\"michael\" \n            LastName=\"kantz\" NumIdentities=\"1\" Locale=\"\"\n            Remarks=\"\" NumObjects=\"1\">\n            <Content>{}</Content>\n              <Identity Id=\"2191863\" \n              StreamProviderId=\"43434343\"\n              StreamProviderType=\"5\" \n              StreamProviderEmail=\"michael.k@gmail.com\" \n              UserName=\"\" FirstName=\"michael\"\n              LastName=\"kantz\" \n              ThumbnailUrl=\"//graph.facebook.com/146582153\n              /picture\"/>\n            </User>\n          </Child>\n        </Children>\n      </Object>\n    </Event>\n\n### OnNewActivity\nThe following events can be triggered by the creation of a new activity:</br></br>\n<b>(a) New remark activity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901738\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565533\" Type=\"1\" CreateDate=\"27-03-2017 06:29:59\">\n            <User Id=\"433178\">\n            <Identity Id=\"16982\" />\n            </User>\n            <Data>{\"text\":\"New remark\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n    \n<b>(b) Status change activity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901731\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565420\" Type=\"2\" \n          CreateDate=\"26-03-2017 06:57:33\">\n          <User Id=\"433178\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"statusId\": 8}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n    \n<b>(c) Object forward activity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901738\" StreamId=\"71\" SubStreamId=\"0\">\n      <Activities>\n        <Activity Id=\"565534\" Type=\"3\" CreateDate=\"27-03-2017 06:29:59\">\n          <User Id=\"433178\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"message\":\"forward object\",\"recipients\":[\"john.k@gmail.com\"],\n          \"allowEmailReply\":true,\"allowCustomerDetails\":true}\n          </Data>\n          </Activity>\n        </Activities>\n        </Object>\n    </Event>\n\n<b>(d) Reply to forwarded object activity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901738\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565532\" Type=\"4\" CreateDate=\"27-03-2017 \n          06:29:59\">\n          <User Id=\"123\" />\n          <Data>{\"message\":\"test\n          test\",\"recipients\":[\"john.k@gmail.com\"],\n          \"attachments\":\"{}\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event> \n\n<b>(e) Object stream change</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901738\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565533\" Type=\"5\" CreateDate=\"27-03-2017 \n          06:29:59\">\n          <User Id=\"123\" />\n          <Data>{\"oldObjectSubstreamName\":\"old_stream_name\",\"oldObjectStreamName\":\"old_sub_stream_name\",\n          \"newObjectStreamName\":\"new_stream_name\", \"newObjectSubstreamName\":\"new_sub_stream_name\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event> \n\n<b>(f) New manager assignment</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"6\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"managerId\":4342094,\"assignedManagerId\":4342094}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(g) Update object tag</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"7\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"tagId\":11,\"objectId\":4342094,\"isRemoveTag\":false,\"name\":\"tag1\",\"group_name\":\"group1\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(h) Follow up object activity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"8\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"433178\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"text\": \"test follow up\" ,\n          \"scheduledTime\": \"03/28/2017 05:30:00\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(i) Update object intent</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"9\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"intentIds\":[11],\"objectId\":4342094,\"isRemoveIntent\":false,\"names\":[\"tag1\"]}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(j) Update object attachments</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"10\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"objectId\":4342094,\"managerId\":452224,\n          \"attachments\":{\"attachments\":[{\"href\":\"/media/Brands/test//5-17/test_image.png\",\"name\":\"test_image\"}]},\n          \"attachmentType\":\"videoCapture\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(k) Object routed</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"11\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"originalStreamId\":12222,\"destStreamId\":114444,\"destSubStreamId\":11,\"changedStatusId\":4,\n          \"tagId\":353,\"tagName\":\"plus_tag\"}}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(l) Update object publicity</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"13\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"changePublicityToPublic\":false}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(m) Unvalid extension file</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"15\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"fileName\":\"3c3b71_IMG_1988.jpeg\",\"status\":\"failed\",\n          \"description\":\"Unsupported file type: image/heic extension: jpeg\",\"unValidActivity\":15,\n          \"fileExtension\":\"jpeg\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(n) Unvalid file size</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"16\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"status\":\"failed\",\"description\":\"File is too big\",\"maxFileSizeAllow\": 10,\n          \"unValidActivity\":16}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(o) Unallowed file upload</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"17\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"status\":\"failed\",\"description\":\"media dos not enabled\",\"unValidActivity\":17}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(p) Inactivity logout</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"18\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n\n<b>(q) Participants change</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnNewActivity\" Brand=\"commbox\">\n      <Object Id=\"901733\" StreamId=\"71\" SubStreamId=\"0\">\n        <Activities>\n          <Activity Id=\"565443\" Type=\"19\" CreateDate=\"26-03-2017 \n          08:45:50\">\n          <User Id=\"4342094\">\n          <Identity Id=\"16982\" />\n          </User>\n          <Data>{\"action\":\"addParticipant\",\"performingAgentId\":192229,\"isAgent\":true,\n          \"addedParticipantName\":\"tomer_b\"}</Data>\n          </Activity>\n        </Activities>\n      </Object>\n    </Event>\n    \n### OnUpdateTag\nThese events are triggered by an update of a tag relating to the object (conversation tag):</br></br>\n<b>(a) Add</b></br>\n    Example:\n\n    <Event Subscription=\"Object\" Name=\"OnUpdateTag\" Brand=\"commbox\">\n      <Object Id=\"901731\" StreamId=\"71\" SubStreamId=\"0\">\n        <Tags>\n        <Tag Id=\"1608\" Action=\"Add\" />\n        </Tags>\n      </Object>\n    </Event>\n<b>(b) Remove</b></br>\nExample:\n\n    <Event Subscription=\"Object\" Name=\"OnUpdateTag\" Brand=\"commbox\">\n      <Object Id=\"901731\" StreamId=\"71\" SubStreamId=\"0\">\n        <Tags>\n        <Tag Id=\"1611\" Action=\"Remove\" />\n        </Tags>\n      </Object>\n    </Event>\n\n\n\n\n## User Events Subscriptions\nEvents in this section indicate a change that occurred in CommBox monitored user(s). The change may be the creation of a new user or an update of an existing one. All updates must contain the surrounding “Event” property and a “User” property and may contain additional properties. \n\n\n### OnNew\nThis event is triggered by the creation of a new user.</br></br>\nExample:\n\n    <Event Subscription=\"User\" Name=\"OnNew\" Brand=\"commbox\">\n      <User Id=\"1798714\" Phone1=\"97252570000\" Phone2=\"\" UniqueID=\"\" Email=\"john.doe@gmail.com\"\n       FirstName=\"michaeli\" LastName=\"\" NumIdentities=\"1\" Locale=\"en_US\" Remarks=\"\" NumObjects=\"0\">\n      <Content>{}</Content>\n      <Identity Id=\"2191862\" StreamProviderId=\"kantzmichaeli@gmail.com\" StreamProviderType=\"4\"\n       StreamProviderEmail=\"\" UserName=\"michaelk\" FirstName=\"michaeli\" LastName=\"kantz\" ThumbnailUrl=\"\" />\n      </User>\n    </Event>\n\n### OnUpdate\nThis event is triggered by an update of a user.</br></br>\nExample:\n\n    <Event Subscription=\"User\" Name=\"OnUpdate\" Brand=\"commbox\">\n      <User Id=\"1710055\" Phone1=\"97252570000\" Phone2=\"972525757054\" UniqueID=\"206064\"\n       Email=\"kantzmichael@gmail.com\" FirstName=\"michael\" LastName=\"kantz\" Gender=\"M\" NumIdentities=\"1\"\n       Locale=\"\" Remarks=\"New user details\">\n      <Content>{}</Content>\n      </User />\n    </Event>\n\n### OnUpdateTag\nThis event is triggered by an update of a tag relating to the user.</br></br>\nExample:\n\n    <Event Subscription=\"User\" Name=\"OnUpdateTag\" Brand=\"commbox\">\n      <User Id=\"1798718\" Phone1=\"972525757054\" Phone2=\"972525757054\" \n      UniqueID=\"\" Email=\"michael.k@gmail.com\" FirstName=\"michael\" \n      LastName=\"\" NumIdentities=\"1\" Locale=\"\" Remarks=\"\" \n      Content=\"{}\">\n        <Tags>\n        <Tag Id=\"1073\" Action=\"Add\" />\n        </Tags>\n      </User>\n    </Event>\n\n## Satisfaction Events Subscriptions\nThis section contains events that describe customer satisfaction reports. Updates must contain a surrounding “Event” property and a “Satisfaction” property. \n\n### OnSubmit\nThis event is triggered by a submission of a satisfaction report relating to some object (conversation).</br></br>\nExample:\n\n    <Event Subscription=\"Satisfaction\" Name=\"OnSubmit\" Brand=\"commbox\">\n      <Satisfaction ObjectId=\"901733\">\n      <Score>100</Score>\n      <Description>excellent</Description>\n      </Satisfaction>\n    </Event>\n\n## Form Events Subscriptions\nThis section contains events that occurred when a form is created or changed. Updates must contain a surrounding “Event” property and a “Form” property. \n\n### OnSubmit\nThis event is triggered when a customer submits a form, and the form PDF file is saved on the disk.</br></br>\nExample:\n\n    <Event Subscription=\"Form\" Name=\"OnSubmit\" Brand=\"commbox\">\n      <Form\n      <ObjectId>901733</ObjectId>\n      <FormUrl> https://apps.commboxdev.io/form...</FormUrl>\n      <Properties>{“field_0”:”Jhon”,”my_own_param”:”1234”}</Properties>\n      </Form>\n    </Event>\n\n## Chat Events Subscriptions\nThis section contains events that occurred when the user closes the chat window or disconnects.\n\n### OnUserExit\nThis event is triggered when the user closes the chat window or disconnect.</br></br>\nExample:\n\n    <Event Subscription=\"Chat\" Name=\"OnUserExit\" Brand=\"commbox\">\n      <Chat>\n        <User id=\"901733\"></User>\n        <Object id=\"901735\"></Object>\n      </Chat>\n    </Event>\n\n# Customization\n\nWe provide customization of our functionalities to be tailored to the client’s needs.</br></br> \n\n## An iFrame on 3rd party Assets \nWe enable our site to be embedded on other web-based platforms as an iFrame. Such integrations enable agents to work within the CRM or Contact platforms and utilize CommBox for communication with customers. Data records are created and updated seamlessly between the two platforms.<br><br>  \n<img src=\"https://www.commbox.io/wp-content/uploads/2025/04/SAP-iFrame.png\">\n \n\nAvailable CRM integrations include **Salesforce**, **Microsoft Dynamics**, **SAP C4C** and more. </br></br>\n\n## Widgets\nWe provide several premade widgets for embedding our Inbox or Object (conversation) in your Dashboards or CRM. These widgets isolate the Object from the rest of the platform, allowing CommBox clients to incorporate them into their 3rd party system.</br></br>\n  To only view the dialog box of the CommBox platform, use this URL:</br>\n  [https://manange.commbox.io](https://manange.commbox.io)</br>\n  To only view a specific Object (conversation), use this URL with the Conversation Id:</br>\n  [https://manange.commbox.io/widget/object/{Object_Id}](https://manange.commbox.io/widget/object/{Object_Id})</br> \nTo obtain the Object Id, click on the 3-vertical-dots menu at the top left corner of the main pane. The Id is displayed at the bottom of that window. </br></br>  \n\n## Desktop Management Customization\nCommBox allows CSS customization for most page elements and specific JavaScript code elements for client-side events. Contact us for more information.</br></br>\n\n# Data structures \nThis section outlines the data structures recognized and transmitted by the API.\n\n**Objects** represent conversations between bots or agents and customers. Each segment within a conversation is referred to as a **Child**. Every conversation is associated with a designated **Stream** — a communication channel such as chat, email, SMS, etc. — where the interaction takes place.\n\nIn the **Objects** category, the focus is on a specific conversation, with the stream serving as part of its identifying attributes. Conversely, in the **Streams** category, the communication channel itself is the primary focus, while objects and users act as filtering criteria for the request.\n\n## Object\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | Object ID. A CommBox generated number for the conversation.| \nStreamId  | int64 | Stream ID to which the object is connected | \nSubStreamId | int64 | Sub Stream ID to which the object is connected |  \nType | short | The type of the object | <a href=\"/api#section/Enums/ObjectType\" title=\"title\">Object Types</a>\nStatusId | string | Current status ID| <a href=\"/api#section/Enums/ObjectStatusType\" title=\"title\">ObjectStatusType</a>\nCreatedTime| datetime | When the object was created | In UTC time\nFirstResponseTime | datetime | When the first response to the object was registered | In UTC time\nUpdatedTime  | datetime | When the object was last updated | In UTC time\nPriorityTime  | datetime | When the object is currently prioritized | In UTC time\nNumChilds | int | Number of child objects relating to this parent object |  \nIsManager | bool | Indicates whether this object was created by an agent |\nNumTags | int | Number of tags assigned to this object|\nMessage| string | The text containing the object’s primary message |\nContent | JSON string | String containing extended properties of the object |\nUser | object | The user that created the object| <a href=\"/api/#section/Data-structures/User\" title=\"title\">User</a>\n\n## Object Child\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | Child ID. A CommBox generated number for the message |\nType | short | The type of the child | <a href=\"/api#section/Enums/ObjectType\" title=\"title\">Object Types</a>\nIsManager | bool | Indicates whether this child was created by an agent |\nCreatedTime| datetime | When the child was created | In UTC time\nMessage| string | The text containing the child’s primary message |\nContent | JSON string | String containing extended properties of the child |\nUser | object | The user that created the child| <a href=\"/api#section/Data-structures/User\" title=\"title\">User</a>\n\n## ObjectActivityLog\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nText  | string | Text content in the activity log |\nSource | string | The source of the activity log (optional) | \nManagerId | Int64 | The manager who initialize the activity log (optional) |\n\n## Tag\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | Tag ID. This is a CommBox generated number |\n\n ## User\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | User ID. A CommBox generated number for the agent/customer etc.|\nUniqueId | string(50) | User’s unique identifier. This can be an email, social security number or any other type of unique string determined by the brand administrators |\nPhone1 | Numeric string(20) | User’s phone number | Always contains country code and without leading + or 00\nPhone2| Numeric string(20) | User’s additional phone number | Always contains country code and without leading + or 00\nEmail | string (255) | User’s email address |\nFirstName | string (100) | User’s first name |\nLastName | string (100) | User’s last name |\nGender | string (1) | User’s gender | ‘M’ for male, ‘F’ for female\nLocale | object | User’s locale |\nBirthday | date | User’s birthday | Date only\nNumIdentities | int | Number of active identities that are connected to this user |\nIsManager | bool |  Indicates whether this user is a agent or an admin (true) or a\n        customer (false) |\n\nRemarks | string | Free text containing general remarks about the user | \nIdentity | object | Identity object that is connected to the user | <a href=\"/api/#section/Data-structures/User-Identity\" title=\"title\">User Identity</a>\n\n## User Identity\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | Identity ID. This is a CommBox generated number and used throughout all the updates |\nStreamProviderId | string(255) | Identity’s unique identifier as it appears at the original provider |\nStreamProviderType | int64 | Type of the original provider | <a href=\"/api/#section/Enums/StreamProviderType\" title=\"title\">StreamProviderType</a>\nStreamProviderEmail| string(255) | Identity’s email as it appears at the original provider |\nUserName | string (100) | Identity’s user name as it appears at the original provider |\nFirstName | string (100) | Identity’s first name as it appears at the original provider |\nLastName | string (100) | Identity’s last name as it appears at the original provider |\nThumbnailUrl | string (255) | Link to the identity’s profile image |\nNumObjects | int | Number of objects connected to this identity |\n\n## Manager\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nId  | int64 | Manager ID. This is a CommBox generated number and used throughout all the updates |\nAsyncAssignedNoResponse | int | Current number of assigned asynchronous objects awaiting response |\nAsyncAssignedInProccess | int | Current number of assigned asynchronous objects that are being addressed by the manager |\nSyncAssignedNoResponse| int | Current number of assigned synchronous objects awaiting response (Chat/messenger conversations) |\nSyncAssignedInProccess | int | Current number of assigned synchronous objects that are being addressed by the manager (Chat/messenger conversations) |\nFaceToFaceStatus | bool | Returns true if the manager is busy with a face to face object (Voice/Video call) |\nTotalAsyncAssigned | int | Total number of currently assigned objects |\nTotalSyncAssigned | int | Total number of currently assigned synchronous objects (Chat/messenger conversations) |\n\n## Object custom indicator\nProperty  | Value | Description | Notes\n------------- | ------------- | - | -\nIndicatorId  | string | Indicator id (unique name) – to allow updating/ deleting existing indicator |\nDisplayClass | string | Indicator class. Mandatory only if Icon has not provided | You must provide DisplayClass or an Icon, or both\nIcon | string | An icon for the indicator. Supports URL. Mandatory only if Icon has not provided (not relevant for DELETE operation) |\nTitle| string | A title for the indicator (not relevant for DELETE operation) |\n\n# Enums\n## ObjectType\n  Text = 0<br>\n  Link = 1<br>\n  Photo = 2<br>\n  Video = 3<br>\n  Conversation = 4<br>\n  Mail = 5<br>\n  Audio = 6<br>\n  Location = 7<br>\n  voice = 8<br>\n  Review = 9<br>\n  Form = 10<br>\n  System Message = 11<br>\n  Option = 12<br>\n  InputData = 13<br>\n  Contacts = 14<br>\n  Album = 15<br>\n  TemplateMessage = 16<br> CampaignMessage = 17<br> SurveyMessage = 18<br>\n\n## ObjectStatusType\n  Open = 1<br>\n  Resolved = 2<br>\n  Forward = 3<br>\n  Irrelevant = 4<br>\n  Deleted = 5<br>\n  Forward Reply = 6<br>\n  Draft = 7<br>\n  In Process = 8<br>\n  Scheduled = 9<br>\n  Follow Up = 10<br>\n  Automated = 11<br>\n  Sent = 13<br>\n  Archive = 14<br>\n  Pending = 15<br>\n\n## StreamProviderType\n  Commbox = 0<br>\n  Facebook = 1<br>\n  Twitter = 2<br>\n  YouTube = 3<br>\n  Mail = 4<br>\n  Telephone = 5<br>\n  Anonymous = 6<br>\n  WhatsApp = 7<br>\n  Web = 8<br>\n  AppleAppStore = 9<br>\n  Instagram= 10<br>\n  Google = 11<br>\n  Telegram = 12<br>\n  GoogleMyBusiness = 13<br>\n  Microsoft365 = 14<br>\n  Gmail = 15<br> WhatsAppCloud = 16<br> Salesforce = 17<br>\n\n## ObjectActivityType\n  Remark = 1<br>\n  StatusChange = 2<br>\n  Forward = 3<br>\n  ForwardReply = 4<br>\n  StreamChange = 5<br>\n  AssignChange = 6<br>\n  UpdateObjectTag = 7<br>\n  FollowUp = 8<br>\n  UpdateObjectIntent = 9<br>\n  Attachment = 10<br>\n  RuleExecuted = 11<br>\n  Custom = 12<br>\n  UpdateObjectPublicity = 13<br>\n  Debug = 14<br>\n  InvalidExtensionFile = 15<br>\n  InvalidFileSize = 16<br>\n  DisallowedFileUpload = 17<br>\n  inactivityLogout = 18<br>\n  ParticipantChange = 19<br>\n  TargetStreamChange = 20<br>\n  ConversationSummary = 21<br>\n  LogError = 22<br>\n  RedactChild = 23<br>\n\n## ModuleType\n  GENERAL = 0<br>\n  CUSTOMER_SERVICE = 1<br>\n  FACEBOOK_PAGE_CONNECTOR = 3<br>\n  STATIC_CONTENT = 4<br>\n  MAILBOX_CONNECTOR = 6<br>\n  YOUTUBE_CONNECTOR = 7<br>\n  TWITTER_CONNECTOR = 8<br>\n  CHAT = 9<br>\n  WEB_SYNDICATION_CONNECTOR = 10<br>\n  FACEBOOK_MONITOR_CONNECTOR = 11<br>\n  WHATSAPP = 13<br>\n  SMS = 14<br>\n  VOICE = 15<br>\n  SSO = 16<br>\n  MANAGE_CLIENT_CUSTOMIZATIONS = 17<br>\n  APPLE_APPSTORE_REVIEWS = 18<br>\n  GOOGLE_PLAY_REVIEWS = 19<br>\n  INSTAGRAM_CONNECTOR = 20<br>\n  CONTACT_US = 21<br>\n  CUSTOMER_SATISFACTIONS = 22<br>\n  AUTOMATION_SCRIPT = 23<br>\n  INTENTS = 24<br>\n  INTERACTIVE_NAVIGATOR = 25<br>\n  WEBRTC_VIDEO_CHAT = 26<br>\n  WEBRTC_AUDIO_CHAT = 27<br>\n  FORMS = 28<br>\n  CUSTOMER_VERIFICATION = 29<br>\n  DYNAMICS_CRM_CONNECTOR = 31<br>\n  CUSTOM_FIELDS = 32<br>\n  RIGHTNOW_CRM = 33<br>\n  RULES = 34<br>\n  EXTERNAL_CONTACTS = 35<br>\n  WORKING_HOURS = 36<br>\n  CUSTOM = 37<br>\n  FACEBOOK_MESSENGER = 38<br>\n  MAINTENANCE = 39<br>\n  PRIVACY_AND_SECURITY = 40<br>\n  AUTO_ASSIGN = 41<br>\n  TWO_FACTOR_AUTHENTICATION = 42<br>\n  THEMES = 43<br>\n  TELEGRAM = 44<br>\n  GOOGLE_MY_BUSINESS = 45<br>\n  SAP_CRM = 46<br>\n  SLA = 47<br>\n  PUSH_NOTIFICATIONS = 48<br>\n  SYS_AID = 49<br>\n  WORKFLOW = 50<br>\n  GOOGLE_TRANSLATE = 51<br>\n  PRIORITY = 53<br>\n  JIRA = 54<br>\n  GOOGLE_BUSINESS_MESSAGES = 55<br>\n  BI_CUSTOM_REPORTS = 57<br>\n  SALESFORCE = 58<br>\n  AI_ASSISTANT = 59<br>\n  API = 60<br>\n  Zendesk = 61<br>\n  Teams = 65<br>\n  Hubspot = 71<br>\n\n## Presence Types\n  Active = 1<br>\n  Busy = 2<br>\n  Away = 3<br>\n  \n## User Permission Types\n  Unauthorized user  = 0<br>\n  Normal - Customer communicating with agent  = 1<br>\n  Agent = 2<br>\n  Admin = 3<br>\n  Bot = 5<br>\n  \n## Tags Types \n  Tag = 1<br>\n  Goal = 2<br>\n  Miss = 3<br>\n  Support Tag = 4<br>\n  Topics Tag = 5<br>\n  Intents = 100<br>\n  Customer Satisfaction = 101<br>\n  SLA = 102<br> \n  Customer Satisfaction Open Answer = 103<br><br>\n  \n  \n  \n  \n# API CALLS\n  \n",
    "version": "2.07",
    "termsOfService": "https://www.commbox.io/end-user-license-agreement-eula/",
    "contact": {
      "name": "commbox",
      "url": "https://www.commbox.io",
      "email": "contactus@commbox.io"
    }
  },
  "servers": [
    {
      "url": "https://api.commbox.io/",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "API Calls",
      "tags": [
        "Core",
        "Objects",
        "Streams",
        "Tags",
        "SMS",
        "WhatsApp",
        "Users",
        "Managers",
        "Profiles",
        "Presence",
        "Assignments",
        "Teams",
        "Forms",
        "Ticket",
        "Automation"
      ]
    }
  ],
  "paths": {
    "/core/systemstatus": {
      "get": {
        "tags": [
          "Core"
        ],
        "summary": "System Status",
        "description": "returns the current state of the system</br></br><b>JSON Example:</b> <br>https://api.commbox.io/core/systemstatus</br>",
        "operationId": "systemStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "System is operational"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/streamavailability": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "Get Stream Availability",
        "description": "This API checks the availability of the stream (channel) and returns the channel’s state.<br><br>Enum:<br>Channel is not active = 0 <br>Available (during business hours) = 1<br>Busy (Overload on agents during business hours) = 2<br>Unavailable (Off business hours or during a special day) = 3<br><br>Note: Path parameters include a Boolean regarding the automation function within that steam (since the bot is always available, the busy and unavailable states will not reflect)<br><br>**True** – Ignore automation<br>**False** – Include automation in the checking</br></br>(GET) /streams/STREAM_ID/streamavailability/ignoreAutomationExsistance  <br> <br><b>Example:</b> <br>https://api.bumpyardpro.com/streams/STREAM_ID/streamavailability/false",
        "operationId": "Get_Stream_Availability",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream ID. is a CommBox generated number for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "ignoreAutomationExsistance",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/objects": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "Get Stream Objects",
        "description": "This API returns information about all Objects (conversations) in the requested Stream (channel).<br><br>**Required query params:**<br>Note: Without limiting the request, the call will fail.<br><br>a)**Time range** - For all Objects within a range of time, enter both **unixStartTime** and **unixEndTime** (Unix Time Stamp format). Max: 100 objects – for larger data additional calls are required.<br><br> b) **Specific user** - For all Objects of a specific user, enter both **identityStreamProviderId** and **IdentityStreamProviderType**.<br>Parameters are found in the “identities” section of the Get Users API. Enter the data found in streamProviderId and StreamProviderType <br><br> c) **Specific user** - For all Objects of a specific user, enter the userIdentityId – the Id of the identity as it appears in the Get Users API (Not to be confused with the “userId” field) <br><br> Use the Sort, Order, etc. optional parameters to limit and organize the output.<br>Note: Object's children and activity logs are False by default.",
        "operationId": "Get_Stream_Objects",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "A CommBox generated number for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "$ref": "#/components/parameters/userIdentityId"
          },
          {
            "$ref": "#/components/parameters/identityStreamProviderId"
          },
          {
            "$ref": "#/components/parameters/identityStreamProviderType"
          },
          {
            "$ref": "#/components/parameters/unixStartTime"
          },
          {
            "$ref": "#/components/parameters/unixEndTime"
          },
          {
            "$ref": "#/components/parameters/subStream"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/includeChilds"
          },
          {
            "$ref": "#/components/parameters/includeActivityLog"
          },
          {
            "$ref": "#/components/parameters/timeFilter"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/status"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-26T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "objectId": {
                                "type": "integer",
                                "example": 62824402
                              },
                              "streamId": {
                                "type": "integer",
                                "example": 345
                              },
                              "substreamId": {
                                "type": "integer",
                                "example": 0
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": "6523da845b1a435cbfb039a3bff043d350cent@bumpyard.com"
                              },
                              "streamProviderType": {
                                "type": "integer",
                                "example": 4
                              },
                              "user_identity": {
                                "type": "integer",
                                "example": 37389853
                              },
                              "firstName": {
                                "type": "string",
                                "example": "null"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "null"
                              },
                              "userStreamProviderId": {
                                "type": "string",
                                "example": "johndoe@gmail.com"
                              },
                              "userStreamProviderType": {
                                "type": "string",
                                "example": "4"
                              },
                              "content": {
                                "type": "string",
                                "example": "{\"{\\\"cc\\\": [{\\\"name\\\": \\\"\\\", \\\"address\\\": \\\"\\\"}], \\\"to\\\": [{\\\"name\\\": \\\"BumpYard\\\", \\\"address\\\": \\\"contact@bumpyardpro.com\\\"}, {\\\"name\\\": \\\"johndoe@gmail.com\\\", \\\"address\\\": \\\"johndoe@gmail.com\\\"}], \\\"bcc\\\": [{\\\"name\\\": \\\"\\\", \\\"address\\\": \\\"\\\"}], \\\"SAP_C4C\\\": {\\\"accept_conversation\\\": true}, \\\"subject\\\": \\\"Re: checking up on you\\\", \\\"is_email\\\": false, \\\"is_public\\\": true, \\\"languages\\\": [{\\\"Item1\\\": \\\"en\\\", \\\"headers_references\\\": \\\"010201921a02fe6c-4c1286f2-dce4-41f3-9921-38d29d1311e4-000000@eu-west-1.amazonses.com\\\", \\\"originalSubStreamId\\\": 0, \\\"sequence_start_time\\\": \\\"2024-09-17 07:43:59\\\", \\\"has_only_manager_childs\\\": false, \\\"first_client_response_time\\\": \\\"2024-09-17T07:43:59.2320185Z\\\", \\\"first_message_sending_failure\\\": true, \\\"headers_references_addition_count\\\": 2}\"}  "
                              },
                              "message": {
                                "type": "string",
                                "example": ">Hi!&nbsp;<br><br>How are you today?"
                              },
                              "createdTime": {
                                "type": "string",
                                "example": "2024-09-17T07:51:52.2581942Z"
                              },
                              "updatedTime": {
                                "type": "string",
                                "example": "2024-09-17T07:51:52.2581942Z"
                              },
                              "closedTime": {
                                "type": "string",
                                "example": "null,"
                              },
                              "firstResponseTime": {
                                "type": "string",
                                "example": "2024-09-17T07:51:52.2581942Z"
                              },
                              "lastResponseTime": {
                                "type": "string",
                                "example": "2024-09-17T07:51:52.2581942Z"
                              },
                              "priorityTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 14
                              },
                              "assignedManagerId": {
                                "type": "integer",
                                "example": 0
                              },
                              "lastAssignedManagerId": {
                                "type": "integer",
                                "example": 27184982
                              },
                              "type": {
                                "type": "integer",
                                "example": 5
                              },
                              "numTags": {
                                "type": "integer",
                                "example": 1
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 36167229
                                  },
                                  "uniqueId": {
                                    "type": "integer",
                                    "example": 12387654
                                  },
                                  "phone1": {
                                    "type": "integer",
                                    "example": 12129871234
                                  },
                                  "phone2": {
                                    "type": "integer",
                                    "example": 19173121122
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "johndoe@gmail.com"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "null"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "null"
                                  },
                                  "gender": {
                                    "type": "string",
                                    "example": ""
                                  },
                                  "numberIdentities": {
                                    "type": "integer",
                                    "description": "number of listings for the user",
                                    "example": 1
                                  },
                                  "Locale": {
                                    "type": "string",
                                    "example": ""
                                  },
                                  "birthday": {
                                    "type": "string",
                                    "example": ""
                                  },
                                  "remarks": {
                                    "type": "string",
                                    "description": "system remarks",
                                    "example": ""
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{\"brand_name\":\"\",\"Account_Number\":\"\",\"GF\":\"0\",\"BOD\":\"\",\"Phone_12\":\"\",\"hbgfdghh\":\"0\",\"test1\":\"\",\"Opening_date_of_account\":\"\"}"
                                  }
                                }
                              },
                              "isManager": {
                                "type": "boolean",
                                "description": "true = agent , false = customer",
                                "example": false
                              },
                              "childs": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 460525246
                                  },
                                  "objectId": {
                                    "type": "integer",
                                    "example": 62824402
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{ \"{\\\"subject\\\":\\\"RE: checking up on you\\\",\\\"attachments\\\":null,\\\"to\\\":[{\\\"name\\\":\\\"samadams@gmail.com\\\",\\\"address\\\":\\\"samadams@gmail.com\\\"}]}\" },   "
                                  },
                                  "message": {
                                    "type": "string",
                                    "example": "<div style=\"direction: ltr\">Hi!&nbsp;<br>Trying to check up on you<br><br><br></div><div><div dir=\"ltr\"><strong>From: </strong>Contact [contact@bumpyardpro.com]</div><div dir=\"ltr\"><strong>Sent: </strong>9/17/2024, 10:33:28 AM</div><div dir=\"ltr\"><strong>To:</strong> samadams@gmail.com</div><div dir=\"ltr\"><strong>Subject: </strong>checking up on you</div><span><span><br></span></span><div dir=\"ltr\">Hi!&nbsp;<br><br>How are you today?</div></div>"
                                  },
                                  "createdTime": {
                                    "type": "string",
                                    "example": "2024-08-17T07:51:52.2581942Z"
                                  },
                                  "streamProviderId": {
                                    "type": "string",
                                    "example": "17325641121"
                                  },
                                  "streamProviderType": {
                                    "type": "integer",
                                    "example": 1
                                  },
                                  "streamProviderEmail": {
                                    "type": "string",
                                    "example": "eddiehakim@gmail.com"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "Eddie"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Hakim"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 234
                              },
                              "streamid": {
                                "type": "integer",
                                "example": 1
                              },
                              "substreamid": {
                                "type": "integer",
                                "example": 1
                              },
                              "type": {
                                "type": "integer",
                                "example": 0
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "createdTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "updatedTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "lastResponseTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "priorityTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": "eddiesmith@gmail.com"
                              },
                              "streamProviderType": {
                                "type": "integer",
                                "example": 7
                              },
                              "message": {
                                "type": "string",
                                "example": "New status from facebook, Hello world!"
                              },
                              "content": {
                                "type": "string",
                                "example": "{\"num_likes\":5,\"user_likes\":false,\"num_shares\":2}"
                              },
                              "numChilds": {
                                "type": "integer",
                                "example": "2"
                              },
                              "numTags": {
                                "type": "integer",
                                "example": "0"
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 123
                                  },
                                  "identity": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "integer",
                                        "example": 7861234
                                      },
                                      "streamProviderId": {
                                        "type": "string",
                                        "example": "eddiesmith@gmail.com"
                                      },
                                      "streamProviderType": {
                                        "type": "integer",
                                        "example": 7
                                      },
                                      "streamProviderEmail": {
                                        "type": "string",
                                        "example": "eddie@gmail.com"
                                      },
                                      "firstName": {
                                        "type": "string",
                                        "example": "Eddie"
                                      },
                                      "lastName": {
                                        "type": "string",
                                        "example": "Smith"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Create Object",
        "description": "This API creates a Conversation in a specified channel and returns an Object Id.<br>Sends the Stream (channel) id with body parameters.",
        "operationId": "Create_Object",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Description of request body parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object"
              },
              "examples": {
                "Mail": {
                  "value": {
                    "data": {
                      "Type": 5,
                      "StatusId": 1,
                      "StreamProviderType": 4,
                      "StreamProviderId": "b9910a75a46c492c9cf46a910cdba0012",
                      "UserStreamProviderId": "john.doe@gmail.com",
                      "UserStreamProviderType": 4,
                      "ManagerId": 12345,
                      "Content": {
                        "subject": "mail subject",
                        "to": [
                          {
                            "address": "john.doe@gmail.com"
                          }
                        ]
                      },
                      "Message": "some message",
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "05055555555",
                        "Email": "john.doe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                },
                "Mail with attachments": {
                  "value": {
                    "data": {
                      "Type": 5,
                      "StatusId": 13,
                      "StreamProviderType": 4,
                      "UserStreamProviderId": "john.doe@gmail.com",
                      "UserStreamProviderType": 4,
                      "ManagerId": 28361974,
                      "Content": {
                        "subject": "Email with an attachment",
                        "to": [
                          {
                            "address": "john.doe@gmail.com"
                          }
                        ],
                        "attachments": [
                          {
                            "path": "https://ebigh.com/wp-content/uploads/2017/12/Basketball-Stars.jpg",
                            "name": "basketball.png"
                          }
                        ]
                      },
                      "Message": "some message",
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "1800958458",
                        "Email": "john.doe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                },
                "SMS": {
                  "value": {
                    "data": {
                      "Type": 4,
                      "StatusId": 1,
                      "StreamProviderType": 5,
                      "StreamProviderId": "972544444444",
                      "UserStreamProviderId": "972544444444",
                      "UserStreamProviderType": 5,
                      "ManagerId": 36197,
                      "Message": "some message",
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "180095845823",
                        "Email": "john.doe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                },
                "SMS Multi-recipient": {
                  "value": {
                    "data": {
                      "Type": 4,
                      "StatusId": 1,
                      "StreamProviderType": 5,
                      "UserStreamProviderId": "972544444444",
                      "UserStreamProviderType": 5,
                      "ManagerId": 36197,
                      "sendToClient": true,
                      "Content": {
                        "to": [
                          "972522222222"
                        ]
                      },
                      "Message": "some message",
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "972544444444",
                        "Email": "john.doe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                },
                "WhatsApp": {
                  "value": {
                    "data": {
                      "Type": 4,
                      "StatusId": 1,
                      "StreamProviderType": 7,
                      "StreamProviderId": "972544444444",
                      "UserStreamProviderId": "972544444444",
                      "UserStreamProviderType": 5,
                      "ManagerId": 36197,
                      "Content": {
                        "to": [
                          "972522222222"
                        ],
                        "whatsapp_hsm_name": "test_template",
                        "whatsapp_localizable_params": [
                          "check_1"
                        ],
                        "whatsapp_language_code": "en"
                      },
                      "Message": "some message",
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "972544444444",
                        "Email": "john.doe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                },
                "Chat": {
                  "value": {
                    "data": {
                      "Type": 4,
                      "StatusId": 1,
                      "StreamProviderType": 0,
                      "UserStreamProviderId": "972544444444",
                      "UserStreamProviderType": 5,
                      "UserIdentity": 100000000419660,
                      "ManagerId": 36197,
                      "Message": "some message",
                      "createChildObject": true,
                      "User": {
                        "UniqueId": "01234567",
                        "LastName": "Doe",
                        "FirstName": "John",
                        "Phone1": "972544444444",
                        "Email": "JohnDoe@gmail.com",
                        "Remarks": "some remark for user"
                      }
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "description": "send object as JSON",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 294159
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/objects/{OBJECT_ID}/child": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Create Child Object",
        "description": " This API creates a message (child) in a conversation (object) on behalf of the agent, sending it to the customer, or on behalf of the customer, displaying it to the agent.<br> The API returns the new child’s ID.<br><br><br>Required path parameters include the Stream (channel) ID and the Object (conversation) ID.<br><br>Required body parameters for a message on behalf of the customer:<br> a) The data “Type” see Enum at https://www.commbox.io/api/#section/Enums/ObjectType <br> b) UserStreamProviderId – the email or phone number of the person you are sending the message on their behalf.<br> c) UserStreamProviderType of the channel. See Enum at https://www.commbox.io/api/#section/Enums/StreamProviderType <br> d) The messages<br><br>Required body parameters for a message on behalf of the agent:<br> a) The data “Type” - See Enum at https://www.commbox.io/api/#section/Enums/ObjectType <br> b) Add this Boolean field 'IsManager': true,<br> c) Enter the agent’s user ID 'UserIdentity' : 34168, <br> Get the agent's User ID by using the Get Managers API https://api.commbox.io/managers <br> d) UserStreamProviderId – the email or phone number of the person you are sending the message on their behalf. <br> e) UserStreamProviderType of the channel. See Enum at https://www.commbox.io/api/#section/Enums/StreamProviderType <br> f) The messages <br><br>**Note:** After 24 hours from last sent message, APIs messages sent to customers will be blocked by WhatsApp.<br><br>POST /streams/STREAM_ID/objects/OBJECT_ID/child<br>POST /streams/STREAM_ID/objects/STREAM_PROVIDER_ID/STREAM_PROVIDER_TYPE/child",
        "operationId": "Create_Child_Object",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "The unique identifier for the stream (CommBox channel)",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "The unique identifier for the object (CommBox conversation)",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Payload containing child object information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Object_Child"
              },
              "examples": {
                "On behalf of Agent - Sending an email": {
                  "value": {
                    "data": {
                      "IsManager": true,
                      "UserIdentity": 36574658,
                      "Type": 4,
                      "UserStreamProviderId": "best.agent@commbox.com",
                      "UserStreamProviderType": 4,
                      "Message": "A new message on behalf of the agent"
                    }
                  }
                },
                "On behalf of Agent - Sending a WhatsApp message": {
                  "value": {
                    "data": {
                      "IsManager": true,
                      "UserIdentity": 36574658,
                      "Type": 4,
                      "UserStreamProviderId": "972542660000",
                      "UserStreamProviderType": 7,
                      "Message": "A new message on behalf of the agent"
                    }
                  }
                },
                "On behalf of Customer": {
                  "value": {
                    "data": {
                      "Type": 4,
                      "UserStreamProviderId": "MrDoe@gmail.com",
                      "UserStreamProviderType": 4,
                      "Message": "A message on behalf of Mr. John Doe"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 294159
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/objects/{OBJECT_ID}": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "Get Object",
        "description": "This API returns the details of a specific conversation (object).<br> Data includes information about the customer, the agent, and a separate account of the messages (Child) of the conversation (Object).<br>  Note that the last communication will appear at the top of the report.<br>Required path params are the **Stream (channel) Id** and **Object (conversation) Id** - Stream Id could be encrypted or not.   </br></br>(GET) /streams/STREAM_ID/objects/OBJECT_ID  <br> <br><b>Example:</b> <br>https://api.commbox.io/streams/532/objects/293854<br><br>Note: When Children are not included in the request, the API only returns the last message. When requesting logs (optional), the return will include all system actions (for example, CRM activity) for the conversation.   ",
        "operationId": "Get_Object",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream Id is a CommBox generated number for the channel.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object Id is a CommBox generated number for the conversation.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          },
          {
            "$ref": "#/components/parameters/includeChilds"
          },
          {
            "$ref": "#/components/parameters/includeActivityLog"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "System is operational"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "objectId": {
                                "description": "A CommBox generated number for the conversation",
                                "type": "integer",
                                "example": 293854
                              },
                              "streamid": {
                                "description": "A CommBox generated number for the channel – This will be the unencrypted format of the channel Id.",
                                "type": "integer",
                                "example": 53211
                              },
                              "substreamid": {
                                "description": "A CommBox generated number for the subchannel. A Sub-stream is not required when calling an API.",
                                "type": "integer",
                                "example": 2432
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": "972505555555"
                              },
                              "streamProviderType": {
                                "type": "integer",
                                "example": "5"
                              },
                              "user_identity": {
                                "type": "integer",
                                "example": "528986"
                              },
                              "firstName": {
                                "description": "When not provided, system will use the email address.",
                                "type": "string",
                                "example": "Eddie"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Doe"
                              },
                              "userStreamProviderId": {
                                "description": "The unique Id for communication (email, phone number)",
                                "type": "string",
                                "example": "972505555555_by"
                              },
                              "userStreamProviderType": {
                                "description": "A CommBox generated number – see Enums",
                                "type": "integer",
                                "example": "5"
                              },
                              "content": {
                                "description": "<br>Summary of the technical aspects of communication. May include the language used, direction (Rt. for Arabic and Hebrew), URL of origin, system details (assignments to agent, acceptance of email, etc.), subject matter (emails), and an initiation time.",
                                "type": "string",
                                "example": "{\\\"guidRT\\\":\\\"82c952166e0b4989b932c41d1\\\",\\\"languages\\\":[{\\\"Item1\\\":\\\"he\\\",\\\"Item2\\\":1329062}],\\\"originUrl\\\":\\\"https://apps.commbox.com/Demo\\\",\\\"isConnected\\\"true,\\\"first_assigned_time\\\":\\\"2023-09-05T08:44:20\\\",\\\"sequence_start_time\\\":\\\"2023-09-0508:55:06.000000\\\",\\\"dropOutAggregationState\\\":1}"
                              },
                              "message": {
                                "type": "string",
                                "example": "I need some help"
                              },
                              "createdTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "updatedTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "closeTime": {
                                "type": "string",
                                "example": "null"
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "assignedManagerId": {
                                "description": "Id of agent / admin",
                                "type": "integer",
                                "example": 0
                              },
                              "type": {
                                "type": "integer",
                                "example": 4
                              },
                              "isManager": {
                                "description": "If True: User is an agent / admin If False: User is a customer",
                                "type": "boolean",
                                "example": false
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 520760
                                  },
                                  "uniqueId": {
                                    "type": "string",
                                    "example": 12345
                                  },
                                  "phone1": {
                                    "description": "As appears in the Customer Info section. System adds country code.",
                                    "type": "string",
                                    "example": 972531234567
                                  },
                                  "phone2": {
                                    "type": "string",
                                    "example": 972501234332
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "eddiedoe053@gmail.com"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "Eddie"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Doe"
                                  },
                                  "gender": {
                                    "type": "string",
                                    "example": "Male"
                                  },
                                  "numberIdentities": {
                                    "type": "integer",
                                    "example": 3
                                  },
                                  "locale": {
                                    "type": "string",
                                    "example": "en_US"
                                  },
                                  "birthday": {
                                    "type": "string",
                                    "example": "01/01/1980"
                                  },
                                  "remarks": {
                                    "type": "string",
                                    "example": "test remark.."
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{}"
                                  },
                                  "childs": {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "example": 123456
                                            },
                                            "object_id": {
                                              "type": "integer",
                                              "example": 1234
                                            },
                                            "content": {
                                              "type": "string",
                                              "example": "{}"
                                            },
                                            "message": {
                                              "type": "string",
                                              "example": "some message..."
                                            },
                                            "createdTime": {
                                              "type": "string",
                                              "example": "2024-08-06T07:51:52.2581942Z"
                                            },
                                            "streamProviderType": {
                                              "type": "integer",
                                              "example": "5"
                                            },
                                            "user": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "integer",
                                                  "example": 520760
                                                },
                                                "managerId": {
                                                  "type": "integer",
                                                  "example": 0
                                                },
                                                "isManager": {
                                                  "type": "boolean",
                                                  "example": false
                                                },
                                                "identity": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "integer",
                                                      "example": 531826
                                                    },
                                                    "streamProviderId": {
                                                      "type": "string",
                                                      "example": "972505555555"
                                                    },
                                                    "streamProviderType": {
                                                      "type": "integer",
                                                      "example": "5"
                                                    },
                                                    "firstName": {
                                                      "type": "string",
                                                      "example": null
                                                    },
                                                    "lastName": {
                                                      "type": "string",
                                                      "example": null
                                                    },
                                                    "thumbnailUrl": {
                                                      "type": "string",
                                                      "example": null
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "example": 978944
                                            },
                                            "object_id": {
                                              "type": "integer",
                                              "example": 1234
                                            },
                                            "content": {
                                              "type": "string",
                                              "example": "{}"
                                            },
                                            "message": {
                                              "type": "string",
                                              "example": "some other message..."
                                            },
                                            "createdTime": {
                                              "type": "string",
                                              "example": "2024-08-06T07:55:52.2581942Z"
                                            },
                                            "streamProviderType": {
                                              "type": "integer",
                                              "example": "5"
                                            },
                                            "user": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "integer",
                                                  "example": 520803
                                                },
                                                "managerId": {
                                                  "type": "integer",
                                                  "example": 520803
                                                },
                                                "isManager": {
                                                  "type": "boolean",
                                                  "example": true
                                                },
                                                "identity": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "integer",
                                                      "example": 531811
                                                    },
                                                    "streamProviderId": {
                                                      "type": "string",
                                                      "example": "michae12@gmail.com"
                                                    },
                                                    "streamProviderType": {
                                                      "type": "integer",
                                                      "example": 0
                                                    },
                                                    "firstName": {
                                                      "type": "string",
                                                      "example": "michael"
                                                    },
                                                    "lastName": {
                                                      "type": "string",
                                                      "example": "null"
                                                    },
                                                    "thumbnailUrl": {
                                                      "type": "string",
                                                      "example": null
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/activities": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "Get Object's Activities",
        "description": "This API returns the data of a specific Activity Type listed in the query param of a specific conversation (object). Use the ActivityType Enum listed above to receive the desired information.<br><br>(GET) /objects/OBJECT_ID/activities?activityType=X_from_Enum<br><br>Example: To see the remarks added to the conversation (activity type #1)<br>https://api.commbox.io/objects/56575395/activities?activityType=1",
        "operationId": "Get_Object_Activities",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object Id is a CommBox generated number for the conversation.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "200"
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-10-30T10:45:41.6038344Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "objectId": {
                            "description": "Conversation ID",
                            "type": "string",
                            "example": "383591"
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 536267
                              },
                              "first_name": {
                                "type": "string",
                                "example": "Sam"
                              },
                              "last_name": {
                                "type": "string",
                                "example": "Adams"
                              },
                              "identity": {
                                "type": "object",
                                "properties": {
                                  "identityId": {
                                    "description": "Agent's ID",
                                    "type": "integer",
                                    "example": 547219
                                  },
                                  "thumbnailUrl": {
                                    "type": "string",
                                    "example": ""
                                  }
                                }
                              }
                            }
                          },
                          "type": {
                            "description": "The activity type - see Enum",
                            "type": "integer",
                            "example": 1
                          },
                          "data": {
                            "description": "The content of activity recorded",
                            "type": "string",
                            "example": "{\"text\":\"Sent a link to video Chat - not responded\"}"
                          },
                          "createdTime": {
                            "description": "Activity creation time",
                            "type": "string",
                            "example": "2024-10-30T13:23:33"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/objects/{OBJECT_ID}/transcript": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "Get Object's Transcript",
        "description": "This API returns the transcript of a specific conversation (object).<br> Data includes information about the conversation (objectId), customer, the channel, sub-channel.<br> Note: The transcript field includes the conversation transcript with an external hyperlink to the Object (conversation) .<br>Required path params are the **Stream (channel) Id** and **Object (conversation) Id** - Stream Id could be encrypted or not.   </br></br>(GET) /streams/STREAM_ID/objects/OBJECT_ID/transcript  <br> <br><b>Example:</b> <br>https://api.commbox.io/streams/532/objects/293854/transcript<br>",
        "operationId": "Get_Object_Transcript",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream Id is a CommBox generated number for the channel.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object Id is a CommBox generated number for the conversation.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-03-19T10:45:41.6038344Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "objectId": {
                                "description": "A CommBox generated number for the conversation",
                                "type": "integer",
                                "example": 378015
                              },
                              "streamid": {
                                "description": "A CommBox generated number for the channel – This will be the unencrypted format of the channel Id.",
                                "type": "integer",
                                "example": 17558
                              },
                              "substreamid": {
                                "description": "A CommBox generated number for the subchannel. A Sub-stream is not required when calling an API.",
                                "type": "integer",
                                "example": 0
                              },
                              "trasncript": {
                                "description": "<br>trasncript of the conversation.",
                                "type": "string",
                                "example": "\\n[2/29/2024 12:20:25 PM] \\nBot : \\nTEST!@$$%^&*()}{\\\":<>?🙁🙁🙁🙁 6_312aac6109.jpg \\n[2/29/2024 12:20:30 PM] \\nJohn Doe: \\nhi \\n[2/29/2024 12:21:05 PM] \\nJohn Doe: \\nAttachments: \\nmashu_mashu_251a989981_25a7e7f517.png \\n[2/29/2024 12:21:22 PM] \\nRan Itzhaki: \\nok \\n[2/29/2024 12:21:29 PM] \\nBot : \\nResolved \\nWispp Object Id: 378015 \\nCommbox Ticket Link: https://qawispp.wispp.com/widget/object/378015"
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 537385
                                  },
                                  "uniqueId": {
                                    "type": "string",
                                    "example": 537385
                                  },
                                  "phone1": {
                                    "description": "As appears in the Customer Info section. System adds country code.",
                                    "type": "string",
                                    "example": 972505445875
                                  },
                                  "phone2": {
                                    "type": "string",
                                    "example": ""
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "test115@gmail.com"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "John"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Doe"
                                  },
                                  "gender": {
                                    "type": "string",
                                    "example": "Male"
                                  },
                                  "numberIdentities": {
                                    "type": "integer",
                                    "example": 3
                                  },
                                  "locale": {
                                    "type": "string",
                                    "example": "en_US"
                                  },
                                  "birthday": {
                                    "type": "string",
                                    "example": "01/01/1980"
                                  },
                                  "remarks": {
                                    "type": "string",
                                    "example": null
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/streams/{STREAM_ID}/objects/{OBJECT_ID}/tags/{TAG_ID}": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Set Object Tag",
        "description": "This API is used to tag a conversation with a specific tag.<br> Required path parameters included the Stream (channel) Id, Object (conversation) Id, and the desired Tag Id.</br></br>(POST) /streams/{STREAM_ID}/objects/{OBJECT_ID}/tags/{TAG_ID}<br><br><b>Example:</b> https://api.wispp.com/streams/17566/objects/372235/tags/2789",
        "operationId": "Set_Object_Tag",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream ID. This is a CommBox generated number for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a CommBox generated number for the conversation",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          },
          {
            "name": "TAG_ID",
            "in": "path",
            "description": "Tag ID. This is a CommBox generated number for each tag",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAG_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete Object Tag",
        "description": "This API is used to delete a specific tag from a conversation.<br> Required path parameters included the Stream (Channel) Id, Object (conversation) Id, and the desired Tag Id.</br></br> (DELETE) /streams/{STREAM_ID}/objects/{OBJECT_ID}/tags/{TAG_ID} <br><b>Example:</b> https://api.wispp.com/streams/17566/objects/372235/tags/2789",
        "operationId": "Delete_Object_Tag",
        "parameters": [
          {
            "name": "STREAM_ID",
            "in": "path",
            "description": "Stream ID. This is a CommBox generated number for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STREAM_ID/schema"
            }
          },
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a CommBox generated number for the conversation",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          },
          {
            "name": "TAG_ID",
            "in": "path",
            "description": "Tag ID. This is a CommBox generated number for each tag",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAG_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/users/{USER_ID}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get user information</br></br>In order to get data, must use either UserId or both streamProviderId and streamProviderType of the user identity",
        "operationId": "Get_User",
        "parameters": [
          {
            "name": "USER_ID",
            "in": "path",
            "description": "User ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/USER_ID/schema"
            }
          },
          {
            "name": "streamProviderId",
            "in": "query",
            "description": "Only return objects created by this user. Represents the user identity. Must supply streamProviderType as well (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "streamProviderType",
            "in": "query",
            "description": "Only return objects created by this user. Represents the user identity. Must supply streamProviderId as well (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": "1769668,"
                        },
                        "firstName": {
                          "type": "string",
                          "example": "Bob"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Cohen"
                        },
                        "gender": {
                          "type": "string",
                          "example": "Male"
                        },
                        "phone1": {
                          "type": "string",
                          "example": 972547724967
                        },
                        "phone2": {
                          "type": "string",
                          "example": null
                        },
                        "uniqueId": {
                          "type": "string",
                          "example": 266684
                        },
                        "email": {
                          "type": "string",
                          "example": "redlich@appnext.com"
                        },
                        "content": {
                          "type": "string",
                          "example": "{}"
                        },
                        "permissionId": {
                          "type": "integer",
                          "example": 1
                        },
                        "numIdentities": {
                          "type": "integer",
                          "example": 2
                        },
                        "numObjects": {
                          "type": "integer",
                          "example": 0
                        },
                        "locale": {
                          "type": "string",
                          "example": "en_US"
                        },
                        "remarks": {
                          "type": "string",
                          "example": "test remark.."
                        },
                        "userTags": {
                          "type": "string",
                          "example": "[{\"id\":1007,\"name\":\"test\",\"group_name\":null}]"
                        },
                        "teamId": {
                          "type": "integer",
                          "example": 0
                        },
                        "identities": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 1957166
                                  },
                                  "userId": {
                                    "type": "integer",
                                    "example": 1769668
                                  },
                                  "numObjects": {
                                    "type": "integer",
                                    "example": 0
                                  },
                                  "userName": {
                                    "type": "string",
                                    "example": null
                                  },
                                  "streamProviderEmail": {
                                    "type": "string",
                                    "example": "redlich@appnext.com"
                                  },
                                  "streamProviderId": {
                                    "type": "string",
                                    "example": "redlich@appnext.com"
                                  },
                                  "streamProviderType": {
                                    "type": "integer",
                                    "example": 4
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "Bob"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Cohen"
                                  },
                                  "thumbnailUrl": {
                                    "type": "string",
                                    "example": null
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{}"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 2158778
                                  },
                                  "userId": {
                                    "type": "integer",
                                    "example": 1769668
                                  },
                                  "numObjects": {
                                    "type": "integer",
                                    "example": 0
                                  },
                                  "userName": {
                                    "type": "string",
                                    "example": null
                                  },
                                  "streamProviderEmail": {
                                    "type": "string",
                                    "example": "bob.c100@gmail.com"
                                  },
                                  "streamProviderId": {
                                    "type": "string",
                                    "example": 972547724967
                                  },
                                  "streamProviderType": {
                                    "type": "integer",
                                    "example": 5
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "Bob"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Cohen"
                                  },
                                  "thumbnailUrl": {
                                    "type": "string",
                                    "example": null
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{}"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "This API updates user information in the **Customer Info** pane.<br><br>The request body parameters either add new information or override existing details. Field names must match the **Unique Name** column in the **Custom Fields** module (case-sensitive).<br>Custom fields added in the Custom Fields module are included in the **Content** field (capital \"C\") of the API request. (See example.)<br><br> Once successful, this API returns the User ID.   ",
        "operationId": "Update_User",
        "parameters": [
          {
            "name": "USER_ID",
            "in": "path",
            "description": "User ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/USER_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User_Info"
              },
              "example": {
                "data": {
                  "UniqueId": "0123456789",
                  "FirstName": "John",
                  "LastName": "Doe",
                  "Phone1": "19175555555",
                  "Email": "JohnDoe@gmail.com",
                  "Remarks": "Some remarks about the customer",
                  "Content": {
                    "Birth_Date": "01-01-1983",
                    "VIP_Status": "8"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "Id": {
                          "type": "integer",
                          "example": 94382332
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/users/identities/{USER_IDENTITY_ID}/objects": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Objects",
        "description": "Get user objects</br></br>In order to get data, must use either userIdentityId or both streamProviderId and streamProviderType of the user identity",
        "operationId": "Get_User_Objects",
        "parameters": [
          {
            "name": "USER_IDENTITY_ID",
            "in": "path",
            "description": "Only return objects created by this user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "streamProviderId",
            "in": "query",
            "description": "Only return objects created by this user. Represents the user identity. Must supply streamProviderType as well (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "streamProviderType",
            "in": "query",
            "description": "Only return objects created by this user. Represents the user identity. Must supply streamProviderId as well (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stream",
            "in": "query",
            "description": "The stream Id from which to return objects (optional, default 0)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/subStream"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order to return the objects (optional, default 'closedtime')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "description": "The object id to filter (optional, default 0)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "moduleId",
            "in": "query",
            "description": "The module id to filter (optional, default 0)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeChilds",
            "in": "query",
            "description": "Flag to return the object childs (optional, default true)",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "includeActivityLog",
            "in": "query",
            "description": "Flag to return the object activity log (optional, default false)",
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "objectId": {
                                "type": "integer",
                                "example": 1234
                              },
                              "streamId": {
                                "type": "integer",
                                "example": 4444
                              },
                              "subStreamId": {
                                "type": "integer",
                                "example": 0
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": "11111111_222222"
                              },
                              "streamProviderType": {
                                "type": "integer",
                                "example": 1
                              },
                              "user_identity": {
                                "type": "integer",
                                "example": 528986
                              },
                              "firstName": {
                                "type": "string",
                                "example": "Yuval"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Hakim"
                              },
                              "userStreamProviderId": {
                                "type": "string",
                                "example": "972505555555_by"
                              },
                              "userStreamProviderType": {
                                "type": "integer",
                                "example": 4
                              },
                              "content": {
                                "type": "string",
                                "example": "{\"num_likes\":5,\"user_likes\":false,\"num_shares\":2}"
                              },
                              "message": {
                                "type": "string",
                                "example": "some message"
                              },
                              "createdTime": {
                                "type": "string",
                                "example": "2024-08-06T07:51:52.2581942Z"
                              },
                              "updatedTime": {
                                "type": "string",
                                "example": "2024-08-07T06:51:52.2581942Z"
                              },
                              "closedTime": {
                                "type": "string",
                                "example": "2024-08-07T07:51:52.2581942Z"
                              },
                              "firstResponseTime": {
                                "type": "string",
                                "example": "2024-08-06T08:00:52.2581942Z"
                              },
                              "lastResponseTime": {
                                "type": "string",
                                "example": "2024-08-06T08:00:52.2581942Z"
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "assignedManagerId": {
                                "type": "integer",
                                "example": 0
                              },
                              "type": {
                                "type": "integer",
                                "example": 0
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": "1769668,"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "example": "Bob"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "example": "Cohen"
                                  },
                                  "gender": {
                                    "type": "string",
                                    "example": "Male"
                                  },
                                  "phone1": {
                                    "type": "string",
                                    "example": 972547724967
                                  },
                                  "phone2": {
                                    "type": "string",
                                    "example": null
                                  },
                                  "uniqueId": {
                                    "type": "string",
                                    "example": 266684
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "redlich@appnext.com"
                                  },
                                  "content": {
                                    "type": "string",
                                    "example": "{}"
                                  },
                                  "locale": {
                                    "type": "string",
                                    "example": "en_US"
                                  },
                                  "remarks": {
                                    "type": "string",
                                    "example": "test remark.."
                                  },
                                  "birthday": {
                                    "type": "string",
                                    "example": "01/01/1990"
                                  },
                                  "numberIdentities": {
                                    "type": "integer",
                                    "example": 3
                                  }
                                }
                              },
                              "isManager": {
                                "type": "boolean",
                                "example": false
                              },
                              "childs": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "integer",
                                          "example": 123456
                                        },
                                        "object_id": {
                                          "type": "integer",
                                          "example": 1234
                                        },
                                        "content": {
                                          "type": "string",
                                          "example": "{}"
                                        },
                                        "message": {
                                          "type": "string",
                                          "example": "some message..."
                                        },
                                        "createdTime": {
                                          "type": "string",
                                          "example": "2024-08-06T07:51:52.2581942Z"
                                        },
                                        "streamProviderType": {
                                          "type": "integer",
                                          "example": "5"
                                        },
                                        "user": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "example": 520760
                                            },
                                            "managerId": {
                                              "type": "integer",
                                              "example": 0
                                            },
                                            "isManager": {
                                              "type": "boolean",
                                              "example": false
                                            },
                                            "identity": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "integer",
                                                  "example": 531826
                                                },
                                                "streamProviderId": {
                                                  "type": "string",
                                                  "example": "972505555555"
                                                },
                                                "streamProviderType": {
                                                  "type": "integer",
                                                  "example": "5"
                                                },
                                                "firstName": {
                                                  "type": "string",
                                                  "example": null
                                                },
                                                "lastName": {
                                                  "type": "string",
                                                  "example": null
                                                },
                                                "thumbnailUrl": {
                                                  "type": "string",
                                                  "example": null
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "integer",
                                          "example": 978944
                                        },
                                        "object_id": {
                                          "type": "integer",
                                          "example": 1234
                                        },
                                        "content": {
                                          "type": "string",
                                          "example": "{}"
                                        },
                                        "message": {
                                          "type": "string",
                                          "example": "some other message..."
                                        },
                                        "createdTime": {
                                          "type": "string",
                                          "example": "2024-08-06T07:55:52.2581942Z"
                                        },
                                        "streamProviderType": {
                                          "type": "integer",
                                          "example": "5"
                                        },
                                        "user": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "example": 520803
                                            },
                                            "managerId": {
                                              "type": "integer",
                                              "example": 520803
                                            },
                                            "isManager": {
                                              "type": "boolean",
                                              "example": true
                                            },
                                            "identity": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "integer",
                                                  "example": 531811
                                                },
                                                "streamProviderId": {
                                                  "type": "string",
                                                  "example": "michae12@gmail.com"
                                                },
                                                "streamProviderType": {
                                                  "type": "integer",
                                                  "example": 0
                                                },
                                                "firstName": {
                                                  "type": "string",
                                                  "example": "michael"
                                                },
                                                "lastName": {
                                                  "type": "string",
                                                  "example": "null"
                                                },
                                                "thumbnailUrl": {
                                                  "type": "string",
                                                  "example": null
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/status/{STATUS_ID}": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Set Object Status",
        "description": "The conversation’s status indicates where the conversation has reached or heading. Statuses include “Open”, “Resolved”, “Archived”, etc.<br>This API updates the status of the conversation. See the Enum section for the Object Status Type.<br><br>Required path parameters include the Object (Conversation) Id and the desired updated status Id.",
        "operationId": "Set_Object_Status",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          },
          {
            "name": "STATUS_ID",
            "in": "path",
            "description": "Status ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/STATUS_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/stream": {
      "patch": {
        "tags": [
          "Objects"
        ],
        "summary": "Update Object's Stream",
        "description": "This API enables developers to change streams (channels) of an object (conversation).<br><br><h3>Available routes:</h3><br><h4>Same-Channel Routing (Conversations remain within the same channel type):</h4><li>SMS (Texting) → SMS<li>Email → Email<li>Chat → Chat<br><br><h4>Cross-Channel Routing (Conversations transfer to different channel types):</h4><li>SMS (Texting) → Email / Chat<br><li>Email → SMS / Chat<br><li>Chat → SMS / Email<br><li>Any channel → Theme<br><br><br>- For the General subchannel ID, enter “0” in the substreamId field.",
        "operationId": "Update_Object_Stream",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "description": "Conversation Id number",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the streamId of the target channel (where the conversation is routed to)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "streamId": {
                        "type": "string",
                        "description": "Enter the streamId of the target channel",
                        "example": 3172
                      },
                      "subStreamId": {
                        "type": "string",
                        "description": "Enter the substreamId (subchannel) of the target channel (optional).<br> For routing conversation to the main channel set the subStreamId to “0”",
                        "example": 812
                      }
                    }
                  }
                }
              },
              "examples": {
                "Update stream": {
                  "value": {
                    "data": {
                      "streamId": 12345
                    }
                  }
                },
                "Update stream and sub-stream": {
                  "value": {
                    "data": {
                      "streamId": 12345,
                      "subStreamId": 67890
                    }
                  }
                },
                "Reset substream": {
                  "value": {
                    "data": {
                      "streamId": 12345,
                      "subStreamId": 0
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful or no change needed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 200
                        },
                        "description": {
                          "type": "string",
                          "example": "Stream and sub-stream values unchanged"
                        },
                        "response_time": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-04-15T07:17:54.6612907Z"
                        },
                        "data": {
                          "type": "string",
                          "example": ""
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 200
                        },
                        "description": {
                          "type": "string",
                          "example": "Operation successful"
                        },
                        "response_time": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-04-15T07:23:18.4795014Z"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "streamId": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The updated stream ID"
                            },
                            "subStreamId": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The updated sub-stream ID"
                            },
                            "updatedTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp of the update operation",
                              "example": "2025-04-15T07:23:18:479"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "success": {
                    "value": {
                      "status": 200,
                      "description": "Operation successful",
                      "response_time": "2025-04-15T07:23:18.4795014Z",
                      "data": {
                        "streamId": 15524,
                        "subStreamId": 2341,
                        "updatedTime": "2025-04-15T07:23:18:479"
                      }
                    }
                  },
                  "no-change": {
                    "value": {
                      "status": 200,
                      "description": "Stream and sub-stream values unchanged",
                      "response_time": "2025-04-15T07:17:54.6612907Z",
                      "data": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The server could not process the request due to missing or invalid information.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 400
                        },
                        "description": {
                          "type": "string"
                        },
                        "response_time": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "data": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 400
                        },
                        "description": {
                          "type": "string"
                        },
                        "response_time": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "message": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "object"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid parameters": {
                    "value": {
                      "status": 400,
                      "description": "Invalid parameters",
                      "response_time": "2025-04-15T07:04:20.6572144Z",
                      "data": ""
                    }
                  },
                  "Missing streamId": {
                    "value": {
                      "status": 400,
                      "description": "Invalid parameters - missing mandatory field - streamId",
                      "response_time": "2025-04-15T07:04:20.6572144Z",
                      "data": ""
                    }
                  },
                  "Object not found": {
                    "value": {
                      "status": 400,
                      "description": "Object not found",
                      "response_time": "2025-04-15T07:00:52.1683555Z",
                      "data": ""
                    }
                  },
                  "invalid stream": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INVALID_STREAM",
                            "message": "The specified stream ID does not exist"
                          }
                        ]
                      }
                    }
                  },
                  "Invalid stream transfer": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INVALID_STREAM_TRANSFER",
                            "message": "Transfers to 'WHATSAPP' are blocked"
                          }
                        ]
                      }
                    }
                  },
                  "Invalid stream type transfer": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INVALID_STREAM_TYPE_TRANSFER",
                            "message": {
                              "content": "Objects can only be transferred between allowed channel types. Allowed transfer",
                              "allowed_transfers": {
                                "SMS": [
                                  "MAILBOX_CONNECTOR",
                                  "CHAT"
                                ],
                                "MAILBOX_CONNECTOR": [
                                  "SMS",
                                  "CHAT"
                                ],
                                "CHAT": [
                                  "SMS",
                                  "MAILBOX_CONNECTOR"
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "Invalid theme transfer": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INVALID_THEME_TRANSFER",
                            "message": "This theme channel can only be transferred to its original channel type"
                          }
                        ]
                      }
                    }
                  },
                  "Missing Email": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "MISSING_EMAIL_ADDRESS",
                            "message": "Email address is required for EMAIL channel"
                          }
                        ]
                      }
                    }
                  },
                  "Missing phone": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "MISSING_PHONE_NUMBER",
                            "message": "Phone number is required for SMS channel"
                          }
                        ]
                      }
                    }
                  },
                  "Invalid sub-stream": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:29:29.7227607Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INVALID_SUBSTREAM",
                            "message": "The specified subStreamId does not belong to the provided streamId"
                          }
                        ]
                      }
                    }
                  },
                  "Inactive sub-stream": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": {
                        "errors": [
                          {
                            "code": "INACTIVE_SUBSTREAM",
                            "message": "The specified subStreamId is inactive and cannot be assigned"
                          }
                        ]
                      }
                    }
                  },
                  "Update object's stream failed": {
                    "value": {
                      "status": 400,
                      "description": "Operation failed",
                      "response_time": "2025-04-15T07:24:52.956691Z",
                      "data": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "description": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "response_time": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The requested resource is not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "description": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "response_time": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 429
                    },
                    "description": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "response_time": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - The server could not return the representation due to an internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation failed"
                    },
                    "response_time": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "description": "Operation failed",
                  "response_time": "2025-04-15T07:24:52.956691Z"
                }
              }
            }
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/content": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Set Object Content",
        "description": "Set the object's content",
        "operationId": "Set_Object_Content",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "data": {
                    "num_likes": 8,
                    "is_hidden": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/activitylog": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Add Activity Log",
        "description": "Add activity log to object",
        "operationId": "Set_Activity_Log",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "data": {
                    "Text": "test!",
                    "Source": "testing",
                    "ManagerId": 1111
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/remarks": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Add Remark Log",
        "description": "Add remark log to object",
        "operationId": "Set_Remark_Log",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "data": {
                    "Text": "test!",
                    "ManagerId": 1111
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/indicators": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Set Custom Indicator",
        "description": "This API sets an icon at the top of the conversation page to give an indication to the agent about the customer or the conversation.<br> When the agent hovers over it, the title appears, and when the agent clicks on it, it can open a link (optional settings).<br><br>See Schema for details.",
        "operationId": "Set_Object_Indicator",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number for the conversation",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "IndicatorId": {
                        "type": "string",
                        "description": "Enter a name for the icon. This name (ID) is required when you want to delete this icon",
                        "example": "home"
                      },
                      "Title": {
                        "type": "string",
                        "description": "Enter the wording that will appear once the user hovers over the icon",
                        "example": "Working from home"
                      },
                      "DisplayClass": {
                        "type": "string",
                        "description": "Enter the icon name as it appears in icomoon.io site, with the 'icon-' heading",
                        "example": "icon-home"
                      },
                      "Link": {
                        "type": "string",
                        "description": "(Optional) Enter a link that will open when the user clicks on the icon",
                        "example": "www.commbox.io"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/objects/{OBJECT_ID}/indicators/{INDICATOR_ID}": {
      "delete": {
        "tags": [
          "Objects"
        ],
        "summary": "Delete Custom Indicator",
        "description": "This API deletes a custom indicator from the conversation.<br> The Conversation (Object) ID and the Indicator ID are required.<br> The Indicator ID is the name used to add the specific icon (“home” in our example above).",
        "operationId": "Delete",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          },
          {
            "name": "INDICATOR_ID",
            "in": "path",
            "description": "Indicator ID. This is the name given to the icon at time of creation",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/INDICATOR_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/stats": {
      "get": {
        "tags": [
          "Managers"
        ],
        "summary": "Get Manager Stats",
        "description": "Based on the agent’s Id, this API returns information about the current number of assignments based on the different statuses.<br><br>Required parameter is the Manager Id (agent/admin Id number generated by CommBox)<br>API returns the Agent’s current assignments tally.",
        "operationId": "Get_Manager_stats",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 520760,
                          "description": "The agent's Id number"
                        },
                        "AsyncAssignedNoResponse": {
                          "type": "integer",
                          "example": 2,
                          "description": "Current number of assigned asynchronous conversations (objects) awaiting a response"
                        },
                        "AsyncAssignedInProccess": {
                          "type": "integer",
                          "example": 1,
                          "description": "Current number of assigned asynchronous conversations (objects) that are being addressed by the manager"
                        },
                        "SyncAssignedNoResponse": {
                          "type": "integer",
                          "example": 0,
                          "description": "Current number of assigned synchronous conversations (objects) awaiting a response"
                        },
                        "SyncAssignedInProccess": {
                          "type": "integer",
                          "example": 0,
                          "description": "Current number of assigned synchronous conversations (objects) that are being addressed by the manager"
                        },
                        "FaceToFaceStatus": {
                          "type": "boolean",
                          "example": false,
                          "description": "Returns true if the agent is busy with a face-to-face conversation (Voice/Video call)"
                        },
                        "TotalAsyncAssigned": {
                          "type": "integer",
                          "example": 3,
                          "description": "Total number of currently assigned Asynchronous conversations."
                        },
                        "TotalSyncAssigned": {
                          "type": "integer",
                          "example": 0,
                          "description": "Total number of currently assigned Synchronous conversations."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}": {
      "get": {
        "tags": [
          "Managers"
        ],
        "summary": "Get Manager",
        "description": "This API returns information about a specific agent or an administrator based on the manager Id (required).",
        "operationId": "Get_Manager",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 520760,
                          "description": "The manager’s id number"
                        },
                        "content": {
                          "type": "string",
                          "example": "{\"user_color\":\"\",\"_isEmailVerified\":true,\"_activationState\":\"Handled\"}",
                          "description": "Lists related statuses about the agent/admin: Active state – shows the user’s status, Password verification, Email verification, Chosen color"
                        },
                        "identityId": {
                          "type": "integer",
                          "example": "2192427",
                          "description": "CommBox associates conversations with a customer via a specified communication channel. A customer may have a few identities when the conversation is using more than one communication channel. For agents/admins, this number is irrelevant and just identifies the user as a Manager. "
                        },
                        "streamProviderId": {
                          "type": "string",
                          "example": "john.s@gmail.com",
                          "description": "Access point – usually the email"
                        },
                        "thumbnailUrl": {
                          "type": "string",
                          "example": null,
                          "description": "If the agent/admin has an associated thumbnail picture, the URL to the file will be listed here."
                        },
                        "brandId": {
                          "type": "integer",
                          "example": 1054,
                          "description": "The CommBox account number associated with this agent/admin"
                        },
                        "permissionId": {
                          "type": "integer",
                          "example": 3,
                          "description": "Admins will have 3. Agents may have any other number (usually 2)"
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Smith"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.s@gmail.com"
                        },
                        "userName": {
                          "type": "string",
                          "example": "john.s"
                        },
                        "teamId": {
                          "type": "integer",
                          "example": 431,
                          "description": "Lists the teams’ Id associated with the agent/admin"
                        },
                        "teamName": {
                          "type": "string",
                          "example": "VIP"
                        },
                        "profiles": {
                          "type": "string",
                          "example": "",
                          "description": "List profiles Id associated with the agent/admin"
                        },
                        "maxSyncObjectsAssignments": {
                          "type": "integer",
                          "example": 3,
                          "description": "States the maximum number of Synchronous conversations the agent allows to have (Admins or agents without limitations will be null). Edit in the Auto Assignment module or in the Status tab of the Users page."
                        },
                        "maxAsyncObjectsAssignments": {
                          "type": "integer",
                          "description": "States the maximum number of Asynchronous conversations the agent allows to have (Admins or agents without limitations will be null). Edit in the Auto Assignment module or in the Status tab of the Users page.",
                          "example": 5
                        },
                        "multiReplyAccess": {
                          "type": "string",
                          "description": "Related to profiles",
                          "example": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Managers"
        ],
        "summary": "Update Manager",
        "operationId": "Update_Manager",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manager"
              },
              "example": {
                "data": {
                  "FirstName": "John",
                  "LastName": "Doe",
                  "IsAdmin": false,
                  "Password": "somepassword",
                  "UserName": "John.d",
                  "TeamId": 12,
                  "PermissionId": 2
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 294159
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Managers"
        ],
        "summary": "Delete Manager",
        "description": "This API deletes agents/admins from the system based on their Agent/Admin Id (Manager_Id).",
        "operationId": "Delete_Manager",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 520760
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers": {
      "get": {
        "tags": [
          "Managers"
        ],
        "summary": "Get Managers",
        "description": "This API returns a list of all agents and admins related to the account.<br>It sends a URL (The specific account Id will be the authentication params) and returns a list of agents/admin found in the account.",
        "operationId": "Get_Managers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The agent’s or admin’s Id number",
                                "example": 520760
                              },
                              "identityId": {
                                "type": "integer",
                                "description": "CommBox associates conversations with a customer via a specified communication channel. A customer may have a few identities when the conversations use more than one communication channel. For agents/admins, this number is irrelevant and just identifies the user as a manager.",
                                "example": "2192427"
                              },
                              "streamProviderId": {
                                "type": "string",
                                "description": "Access point – usually the email",
                                "example": "john.s@gmail.com"
                              },
                              "thumbnailUrl": {
                                "description": "If the agent/admin has an associated thumbnail picture, the URL to the file will be listed here.",
                                "type": "string",
                                "example": null
                              },
                              "brandId": {
                                "type": "integer",
                                "description": "The business account number in CommBox",
                                "example": 223221
                              },
                              "permissionId": {
                                "type": "integer",
                                "example": 3
                              },
                              "firstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Smith"
                              },
                              "email": {
                                "type": "string",
                                "example": "john.s@gmail.com"
                              },
                              "userName": {
                                "type": "string",
                                "example": "john.s"
                              },
                              "team": {
                                "type": "integer",
                                "description": "List all teams associated with this agents",
                                "example": "2343,2445,4342"
                              },
                              "teamId": {
                                "type": "integer",
                                "description": "Id of the first team this agent belonged to",
                                "example": 2343
                              },
                              "teamName": {
                                "type": "string",
                                "description": "The name of the first listed team",
                                "example": "VIP"
                              },
                              "profiles": {
                                "type": "string",
                                "description": "Profiles Id(s) associated with this agent.",
                                "example": "234355,24566"
                              },
                              "maxSyncObjectsAssignments": {
                                "type": "integer",
                                "example": 3
                              },
                              "maxAsyncObjectsAssignments": {
                                "type": "integer",
                                "example": 5
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 520761
                              },
                              "identityId": {
                                "type": "integer",
                                "example": "2192428"
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": "john.d@gmail.com"
                              },
                              "thumbnailUrl": {
                                "type": "string",
                                "example": null
                              },
                              "brandId": {
                                "type": "integer",
                                "example": 2
                              },
                              "permissionId": {
                                "type": "integer",
                                "example": 3
                              },
                              "firstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "lastName": {
                                "type": "string",
                                "example": "Doe"
                              },
                              "email": {
                                "type": "string",
                                "example": "john.d@gmail.com"
                              },
                              "userName": {
                                "type": "string",
                                "example": "john.d"
                              },
                              "teamId": {
                                "type": "integer",
                                "example": 0
                              },
                              "teamName": {
                                "type": "string",
                                "example": ""
                              },
                              "profiles": {
                                "type": "string",
                                "example": ""
                              },
                              "maxSyncObjectsAssignments": {
                                "type": "integer",
                                "example": 2
                              },
                              "maxAsyncObjectsAssignments": {
                                "type": "integer",
                                "example": 4
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Managers"
        ],
        "summary": "Create Manager",
        "description": "This API creates a new agent or an admin in the system.<br>Required parameters include the full name, email address, and initial password.<br><br> Body params must also include if the new entity is an admin (IsAdmin Boolean is true) or an agent (IsAdmin Boolean is false).<br> Add the team Id and profile Id for the new agent (optional).<br><br>API returns a user Id.",
        "operationId": "Create_Manager",
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manager"
              },
              "example": {
                "data": {
                  "FirstName": "John",
                  "LastName": "Doe",
                  "Email": "John.d@gmail.com",
                  "IsAdmin": false,
                  "Password": "somepassword",
                  "UserName": "John.d",
                  "TeamId": 12,
                  "PermissionId": 2
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 294159
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/profiles/{PROFILE_ID}": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Managers By Profile ID",
        "description": "This API returns a list of all the agents that share the specified Profile Id.",
        "operationId": "Get_manager_by_profile_id",
        "parameters": [
          {
            "name": "PROFILE_ID",
            "in": "path",
            "description": "Profile ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/PROFILE_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "integer",
                                "example": 520760
                              },
                              "FirstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "LastName": {
                                "type": "string",
                                "example": "smith"
                              },
                              "Permission": {
                                "type": "integer",
                                "example": 2
                              },
                              "Email": {
                                "type": "string",
                                "example": "john.s@gmail.com"
                              },
                              "UserName": {
                                "type": "string",
                                "example": "john.s"
                              },
                              "TeamId": {
                                "type": "integer",
                                "example": 0
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "integer",
                                "example": 520761
                              },
                              "FirstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "LastName": {
                                "type": "string",
                                "example": "Doe"
                              },
                              "Permission": {
                                "type": "integer",
                                "example": 2
                              },
                              "Email": {
                                "type": "string",
                                "example": "john.d@gmail.com"
                              },
                              "UserName": {
                                "type": "string",
                                "example": "john.d"
                              },
                              "TeamId": {
                                "type": "integer",
                                "example": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/teams/{TEAM_ID}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team Members",
        "description": "This API returns a list of all agents and team leaders associated with a specific team.<br> Team Id is a required path parameter.",
        "operationId": "Get_manager_by_team_id",
        "parameters": [
          {
            "name": "TEAM_ID",
            "in": "path",
            "description": "Team ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TEAM_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "integer",
                                "example": 520760
                              },
                              "FirstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "LastName": {
                                "type": "string",
                                "example": "smith"
                              },
                              "Permission": {
                                "type": "integer",
                                "example": 2
                              },
                              "Email": {
                                "type": "string",
                                "example": "john.s@gmail.com"
                              },
                              "UserName": {
                                "type": "string",
                                "example": "john.s"
                              },
                              "TeamId": {
                                "type": "integer",
                                "example": 5
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "integer",
                                "example": 520761
                              },
                              "FirstName": {
                                "type": "string",
                                "example": "John"
                              },
                              "LastName": {
                                "type": "string",
                                "example": "Doe"
                              },
                              "Permission": {
                                "type": "integer",
                                "example": 2
                              },
                              "Email": {
                                "type": "string",
                                "example": "john.d@gmail.com"
                              },
                              "UserName": {
                                "type": "string",
                                "example": "john.d"
                              },
                              "TeamId": {
                                "type": "integer",
                                "example": 5
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team by Team Id",
        "description": "Update team by given parameters",
        "operationId": "Update_team_by_team_id",
        "parameters": [
          {
            "name": "TEAM_ID",
            "in": "path",
            "description": "Team ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TEAM_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete a Team",
        "description": "This API deletes a team based on the Team Id (required Parameter).",
        "operationId": "Delete_team_by_team_id",
        "parameters": [
          {
            "name": "TEAM_ID",
            "in": "path",
            "description": "Team ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TEAM_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/presence": {
      "get": {
        "tags": [
          "Presence"
        ],
        "summary": "Get Manager Presence",
        "description": "This API returns the Presence status(es) of a specific agent.<br> The Manager (agent) Id is a required path parameter.",
        "operationId": "Get_Manager_presence",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "presence_type": {
                          "type": "integer",
                          "example": 1
                        },
                        "type_id": {
                          "type": "integer",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Active"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/presence/{ACTIVITY_ID}": {
      "post": {
        "tags": [
          "Presence"
        ],
        "summary": "Update Manager Presence",
        "description": "Update manager presence activity id",
        "operationId": "Update_Manager_presence",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          },
          {
            "name": "ACTIVITY_ID",
            "in": "path",
            "description": "Valid ACTIVITY_ID",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ACTIVITY_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "presence_type": {
                          "type": "integer",
                          "example": 1
                        },
                        "type_id": {
                          "type": "integer",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Active"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/presence": {
      "get": {
        "tags": [
          "Presence"
        ],
        "summary": "Get Presence Types",
        "description": "This API returns a list of presence Ids, names, and types within the system.",
        "operationId": "Get_presence_types",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "Active"
                              },
                              "presenceType": {
                                "type": "integer",
                                "example": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "example": "Busy"
                              },
                              "presenceType": {
                                "type": "integer",
                                "example": 2
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/profiles": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get Profiles",
        "description": "A profile is a set of permissions the agent has access to.<br> This API returns a list of all agents’ profile Ids and profile names.<br><br>API Returns <br> \"Id\" refers to the profile Id number <br> \"Name\" is the name of the profile <br> \"UniqueName\" is a secondary name (optional)",
        "operationId": "Get_profiles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "test"
                              },
                              "UniqueName": {
                                "type": "string",
                                "example": "unique test"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "example": "test 2"
                              },
                              "UniqueName": {
                                "type": "string",
                                "example": "unique test 2"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/profiles": {
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Remove All Agent Profiles",
        "description": "This API removes all profiles from a specific agent/admin.<br> The agent Id is a required path parameter. You can obtain a list of agent Ids from the Get Manager API.",
        "operationId": "Remove_All_Manager_Profiles",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager Id is a CommBox generated number for the agent Id.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Add Profiles",
        "description": "This API Adds or changes the profiles of a specific agent/admin.<br>The Manager Id of the agent is required, as well as the specific profile Id or name.<br><br>To <b>Add</b> profiles, set the Query parameter to “add” and enter the profile’s name or Id. Separate multiple profiles with a comma.<br><br>To <b>Change</b> profiles (delete the current and add the new), set the Query parameter to “set” and enter the profile’s name or Id. Separate multiple profiles with a comma.<br><br><b>Note that only one query parameter should be used – not both.</b><br>API Sends URL + Manager’s Id q=[profile id]",
        "operationId": "Add_Profiles",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          },
          {
            "name": "add",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "minItems": 1
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "set",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "minItems": 1
            },
            "style": "form",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "test"
                              },
                              "UniqueName": {
                                "type": "string",
                                "example": "unique test"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "example": "test 2"
                              },
                              "UniqueName": {
                                "type": "string",
                                "example": "unique test 2"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/profiles/{PROFILE_ID}": {
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Delete Manager Profile",
        "description": "This API removes a specific profile from a specific agent/admin.<br> The agent Id and profile Id are required path parameters. You can obtain a list of agent Ids from the Get Manager API and a list of profiles from the Get Profile API.",
        "operationId": "Delete_Manager_Profile",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          },
          {
            "name": "PROFILE_ID",
            "in": "path",
            "description": "Profile ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/PROFILE_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/{MANAGER_ID}/assignments": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Get Manager Assignments",
        "description": "This API returns a list of assigned conversations to a specific agent/admin.<br> Manager (agent) Id is a required path parameter.<br><br>Data includes the communication channel type (see Enum) and its unique name.",
        "operationId": "Get_Manager_Assignments",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Manager ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "AssignedObjectsCount": {
                                "type": "integer",
                                "example": 1
                              },
                              "StreamTypeId": {
                                "type": "integer",
                                "example": 3
                              },
                              "ModuleId": {
                                "type": "integer",
                                "example": 3
                              },
                              "ModuleUniqueName": {
                                "type": "string",
                                "example": "facebook_page_connector"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "AssignedObjectsCount": {
                                "type": "integer",
                                "example": 2
                              },
                              "StreamTypeId": {
                                "type": "integer",
                                "example": 10
                              },
                              "ModuleId": {
                                "type": "integer",
                                "example": 6
                              },
                              "ModuleUniqueName": {
                                "type": "string",
                                "example": "mailbox_connector"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "AssignedObjectsCount": {
                                "type": "integer",
                                "example": 65
                              },
                              "StreamTypeId": {
                                "type": "integer",
                                "example": 20
                              },
                              "ModuleId": {
                                "type": "integer",
                                "example": 26
                              },
                              "ModuleUniqueName": {
                                "type": "string",
                                "example": "webrtc_video_chat"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "Assign Manager",
        "description": "This API assigns a conversation to a specific agent.<br> Manager (agent) Id is a required path parameter, and the Object (conversation) Id is a required query parameter. </b> </br></br> Example</br> https://api.commbox.io/managers/{MANAGER_ID}/assignments?objectId={OBJECT_ID}<b>",
        "operationId": "Assign_Manager",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Valid MANAGER_ID",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "description": "objectId",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Assignments"
        ],
        "summary": "Unassign Manager",
        "description": "This API unassigns a conversation to a specific agent.<br> Manager (agent)Id is a required path parameter, and the Object (conversation) Id is a required query parameter. </b> </br></br> Example</br> https://api.commbox.io/managers/{MANAGER_ID}/assignments?objectId={OBJECT_ID}<b>",
        "operationId": "Unassign_Manager",
        "parameters": [
          {
            "name": "MANAGER_ID",
            "in": "path",
            "description": "Valid MANAGER_ID",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/MANAGER_ID/schema"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "description": "objectId",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/stats/streams": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "Get Streams Stats",
        "description": "returns the current object statuses in all streams for the requested brand",
        "operationId": "Get_streams_stats",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "moduleId": {
                                "type": "integer",
                                "example": 1
                              },
                              "streamId": {
                                "type": "integer",
                                "example": 1
                              },
                              "subStreamId": {
                                "type": "integer",
                                "example": 0
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "c": {
                                "type": "integer",
                                "example": 93
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "moduleId": {
                                "type": "integer",
                                "example": 3
                              },
                              "streamId": {
                                "type": "integer",
                                "example": 18
                              },
                              "subStreamId": {
                                "type": "integer",
                                "example": 25
                              },
                              "statusId": {
                                "type": "integer",
                                "example": 1
                              },
                              "c": {
                                "type": "integer",
                                "example": 28
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/stats/streamsSLAExceptions": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "Get SLA Breach Summary",
        "description": "A service-level agreement (SLA) defines the service standards the provider is obligated to provide to the customer. The First Response time to the customer’s inquiry is an example of a typical SLA measured by CommBox. After that time passes, the SLA is breached.<br><br> There are 2 SLA Warnings that can be set in the SLA settings page:<br> - A warning is activated after 50% (default settings) of the time allotted by the SLA past.<br> - A critical warning is activated when there is only 20% (default settings) of the time left before an SLA breach.<br> (For example, if the Service Level Agreement is 5 minutes, conversations waiting for the First Response will be painted in orange after 2.5 minutes and in red after 4 minutes.)<br><br> This API returns the number of SLA breaches for the entire account divided by communication channel Id, longest conversations, and specific agent/bot SLA.<br> Note:“Exceptions” refers to Breaches, and “SlaCritical” refers to the SLA critical warning.",
        "operationId": "Get_SLA_streams_stats",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "Item1": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "moduleId": {
                                          "type": "integer",
                                          "example": 3
                                        },
                                        "streamId": {
                                          "type": "integer",
                                          "example": 18
                                        },
                                        "subStreamId": {
                                          "type": "integer",
                                          "example": 25
                                        },
                                        "statusId": {
                                          "type": "integer",
                                          "example": 1
                                        },
                                        "c": {
                                          "type": "integer",
                                          "example": 28
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "moduleId": {
                                          "type": "integer",
                                          "example": 3
                                        },
                                        "streamId": {
                                          "type": "integer",
                                          "example": 18
                                        },
                                        "subStreamId": {
                                          "type": "integer",
                                          "example": 25
                                        },
                                        "statusId": {
                                          "type": "integer",
                                          "example": 1
                                        },
                                        "c": {
                                          "type": "integer",
                                          "example": 28
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "Item2": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "moduleId": {
                                          "type": "integer",
                                          "example": 3
                                        },
                                        "streamId": {
                                          "type": "integer",
                                          "example": 18
                                        },
                                        "subStreamId": {
                                          "type": "integer",
                                          "example": 25
                                        },
                                        "statusId": {
                                          "type": "integer",
                                          "example": 1
                                        },
                                        "c": {
                                          "type": "integer",
                                          "example": 28
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "moduleId": {
                                          "type": "integer",
                                          "example": 3
                                        },
                                        "streamId": {
                                          "type": "integer",
                                          "example": 18
                                        },
                                        "subStreamId": {
                                          "type": "integer",
                                          "example": 25
                                        },
                                        "statusId": {
                                          "type": "integer",
                                          "example": 1
                                        },
                                        "c": {
                                          "type": "integer",
                                          "example": 28
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/managers/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get All Teams",
        "description": "This API lists all the Teams Ids and their names for the account.",
        "operationId": "Get_Team",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "teamId": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "test"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "teamId": {
                                "type": "integer",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "example": "test 2"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a Team",
        "description": "This API is used to create a new Team.<br><br> Enter the new Team’s name in the query parameter.<br>The API returns a new Team Id number.",
        "operationId": "Create_Team",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "OK"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 21221
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/sms/sendinitialtext/{ENCRYPTED_STREAM_ID}/{PHONE_NUMBER}": {
      "post": {
        "tags": [
          "SMS"
        ],
        "summary": "Send Initial SMS (Texting)",
        "description": "This API sends the initial conversation text message to the user",
        "operationId": "Send_initial_text_SMS",
        "parameters": [
          {
            "name": "ENCRYPTED_STREAM_ID",
            "in": "path",
            "description": "CommBox generated encryption for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ENCRYPTED_STREAM_ID/schema"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "A valid phone number for the customer",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/PHONE_NUMBER/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/sms/sendsms/{ENCRYPTED_STREAM_ID}": {
      "post": {
        "tags": [
          "SMS"
        ],
        "summary": "Sends SMS (Texting)",
        "description": "This API sends SMS (Texting) to the customer. <br><br> Required body parameters include the phone number with country code and the message.",
        "operationId": "Send_SMS",
        "parameters": [
          {
            "name": "ENCRYPTED_STREAM_ID",
            "in": "path",
            "description": "CommBox generated encryption for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ENCRYPTED_STREAM_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "Number": {
                        "type": "string",
                        "example": "9725051234567"
                      },
                      "Message": {
                        "type": "string",
                        "example": "message text"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/v2/whatsapp/sendtemplatedmessage/{ENCRYPTED_STREAM_ID}": {
      "post": {
        "tags": [
          "WhatsApp"
        ],
        "summary": "Send WhatsApp Templated Message V2",
        "description": "\n\n This API sends a generated WhatsApp template from the **WhatsApp Business Account** (WABA) to a single recipient or to multiple recipients (up to 20).<br><br>\n **Key New Capabilities of V2 version**<br><br> \nMarketing and Utility Templates may have a header with text or added media (attached document, image, or video), a footer, and a call for action or quick reply buttons.<br>The API can also create CommBox object(s), support subchannels, and enable scheduled publishing by adding unix timestamp code to the schedule field (see the 'Send a template with text' example).<br><br></br>\n\n **Send Templated Message + Object data**<br><br>\n Sending any templated WhatsApp message with Object data also creates a conversation (Object) on the CommBox platform.<br><br>**Note:** Adding the **ManagerId** field with the agent’s Id (optional) will ensure the agent is reflected in various reports. Objects without a managerId will display conversations as being initiated by 'customer'. <br><br> The required and optional fields are described here: https://www.commbox.io/api/#operation/Create_Object\n\n<br><br> **Send Templated Message with an Attached Media**<br><br>\n There are two ways to do so: \n\na) Sending a Templated Message with a link to the file. Example below: 'Send a template with an attachment (doc)'.\n<br><br>\n OR<br>\n\nb) Use the /whatsapp/uploadmedia/{ENCRYPTED_STREAM_ID} API endpoint to upload the file to WhatsApp servers and then fetch the uploaded file ID from the response for sending a templated message with the attachment ID. See the 'Send a template with an attachment ID (video)' example. \n\n<br><br>**Authentication Templates**<br><br>\n\n See the Examples for sending an authentication template. <br><br>For more information:\n<li> https://help.commbox.io/docs/creating-new-whatsapp-authentication-templates<br>\n<li> https://developers.facebook.com/docs/whatsapp/updates-to-pricing/new-template-guidelines/#authentication-templates\n   ",
        "operationId": "Send_Templated_Message_V2",
        "parameters": [
          {
            "name": "ENCRYPTED_STREAM_ID",
            "in": "path",
            "description": "CommBox generated encryption for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ENCRYPTED_STREAM_ID/schema"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhatsApp_template"
              },
              "examples": {
                "Send a template with text": {
                  "value": {
                    "data": [
                      {
                        "schedule": 1739365010,
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "Text Template",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with text + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "Text Template",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "19172537000",
                            "Email": "John.D@gmail.com",
                            "Remarks": "Returning customer"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with 2 body parameters": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "Basic WA template",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "Hellooooo"
                                  },
                                  {
                                    "type": "text",
                                    "text": "my friend"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with header  & body parameters": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "Text Header & Body",
                            "language": {
                              "code": "he"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "text1"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "text2"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with header & body parameters + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280801",
                          "template": {
                            "name": "ren_text_header_body",
                            "language": {
                              "code": "he"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "text1"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "text2"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "97253720000",
                            "Email": "John.Doe@gmail.com",
                            "Remarks": "some remark for user"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with 3 body parameters + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280801",
                          "template": {
                            "name": "multiple_params_in_body",
                            "language": {
                              "code": "en_GB"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "https://www.commbox.io"
                                  },
                                  {
                                    "type": "text",
                                    "text": "https://www.commbox.io2"
                                  },
                                  {
                                    "type": "text",
                                    "text": "https://www.commbox.io3"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "97253720000",
                            "Email": "john.doe@gmail.com",
                            "Remarks": "some remark for user"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (image)": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "header_image",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "image",
                                    "image": {
                                      "link": "https://picsum.photos/200"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "hello"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (image) + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "test_wisspp_4",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "image",
                                    "image": {
                                      "link": "https://picsum.photos/200"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "97253720000",
                            "Email": "John.Doe@gmail.com",
                            "Remarks": "some remark for user"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (image) ID + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "image1",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "image",
                                    "image": {
                                      "id": "614927520593182"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "JPG"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 13,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "97253720000",
                            "Email": "john.doe@gmail.com",
                            "Remarks": "some remark for user"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (doc)": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280999",
                          "template": {
                            "name": "doc1",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "document",
                                    "document": {
                                      "link": "https://denverzoo.org/wp-content/uploads/2018/09/African-lion.pdf",
                                      "filename": "African-lion.pdf"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "hello"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (doc) + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "doc1",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "document",
                                    "document": {
                                      "link": "https://denverzoo.org/wp-content/uploads/2018/09/African-lion.pdf",
                                      "filename": "African-lion.pdf"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "hello"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "Ron",
                            "Phone1": "19172537000",
                            "Email": "john.doe@gmail.com",
                            "Remarks": "some remark for user"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (doc) ID + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "header_doc",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "document",
                                    "document": {
                                      "id": "550197337025434",
                                      "filename": "file-sample_150kB.pdf"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "PDF"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 13,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "97253720000",
                            "Email": "John.Doe@gmail.com",
                            "Remarks": "Just checking"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (video)": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "header_video",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "video",
                                    "video": {
                                      "link": "http://techslides.com/demos/sample-videos/small.mp4"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "hello"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (video) + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "header_video",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "video",
                                    "video": {
                                      "link": "http://techslides.com/demos/sample-videos/small.mp4"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "hello"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "Ron",
                            "Phone1": "972537280000",
                            "Email": "Ron.Doe@gmail.com",
                            "Remarks": "Sending video files is great"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a template with an attachment (video) ID + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "header_video",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "header",
                                "parameters": [
                                  {
                                    "type": "video",
                                    "video": {
                                      "id": "27f8b007-7750-418e-9852-b4f8b7f95b9f"
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "Video_20221023_111733_014.mp4"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 13,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Lin",
                            "FirstName": "Robert",
                            "Phone1": "972537280000",
                            "Email": "Lin.R34@gmail.com",
                            "Remarks": "Deal of the day"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with 'Call a phone number' button": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "Call_a_phone_num_btn",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with 'Call a phone number' button + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "Call_a_phone_num_btn",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "9725372800000",
                            "Email": "John.Doe@gmail.com",
                            "Remarks": "Contatcts buttons are great"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with 'Call a phone number' + 'Visit a website' buttons": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "Call_and_Visit_a_Website_btns",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with 'Call a phone number' + 'Visit a website' buttons + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "Call_and_Visit_a_Website_btns",
                            "language": {
                              "code": "en"
                            },
                            "components": []
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 78121,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Doe",
                            "FirstName": "John",
                            "Phone1": "9725372800000",
                            "Email": "John.Doe@gmail.com",
                            "Remarks": "Contatcts buttons are great"
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with a Static URL button": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "static_url",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "Name"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with a Static URL button + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "static_url",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "Name"
                                  }
                                ]
                              }
                            ]
                          },
                          "object_data": {
                            "createChildObject": true,
                            "SubStreamId": 0,
                            "StatusId": 1,
                            "ManagerId": 78121,
                            "Content": {},
                            "User": {
                              "UniqueId": "01234567",
                              "LastName": "Fox",
                              "FirstName": "Johnny",
                              "Phone1": "9725372800000",
                              "Email": "john.fox53@gmail.com",
                              "Remarks": "Static URL is great"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with a Dynamic URL button": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "dynamic_url",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "button",
                                "sub_type": "url",
                                "index": 0,
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "api"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Call-to-Action template with a Dynamic URL button + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "19172537000",
                          "template": {
                            "name": "url_dyn",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "button",
                                "sub_type": "url",
                                "index": 0,
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "api"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              }
                            ]
                          },
                          "object_data": {
                            "createChildObject": true,
                            "SubStreamId": 0,
                            "StatusId": 1,
                            "ManagerId": 78121,
                            "Content": {},
                            "User": {
                              "UniqueId": "01234567",
                              "LastName": "Fox",
                              "FirstName": "Johnny",
                              "Phone1": "9725372800000",
                              "Email": "john.fox53@gmail.com",
                              "Remarks": "Dynamic URL is great"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Quick Reply template with 3 buttons": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "3 buttons",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send a Quick Reply template with 3 buttons + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "3 buttons",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              }
                            ]
                          },
                          "object_data": {
                            "createChildObject": true,
                            "SubStreamId": 0,
                            "StatusId": 1,
                            "ManagerId": 78121,
                            "Content": {},
                            "User": {
                              "UniqueId": "01234567",
                              "LastName": "Doe",
                              "FirstName": "John",
                              "Phone1": "9725372800000",
                              "Email": "John.Doe@gmail.com",
                              "Remarks": "Quick Reply with 3 Buttons is great"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "Send an authentication template": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "auth_template",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "button",
                                "sub_type": "url",
                                "index": 0,
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "name"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "Send an authentication template + Object data": {
                  "value": {
                    "data": [
                      {
                        "template_data": {
                          "to": "972537280000",
                          "template": {
                            "name": "auth_template",
                            "language": {
                              "code": "en"
                            },
                            "components": [
                              {
                                "type": "button",
                                "sub_type": "url",
                                "index": 0,
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "COPY"
                                  }
                                ]
                              },
                              {
                                "type": "body",
                                "parameters": [
                                  {
                                    "type": "text",
                                    "text": "455455"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "object_data": {
                          "createChildObject": true,
                          "SubStreamId": 0,
                          "StatusId": 1,
                          "ManagerId": 387123,
                          "Content": {},
                          "User": {
                            "UniqueId": "01234567",
                            "LastName": "Fox",
                            "FirstName": "David",
                            "Phone1": "9725372800000",
                            "Email": "david.fox53@gmail.com",
                            "Remarks": "Looking for a new device"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recipient": {
                            "type": "string",
                            "description": "Recipient number",
                            "example": 972546663529
                          },
                          "id": {
                            "type": "string",
                            "example": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ"
                          },
                          "status": {
                            "type": "integer",
                            "format": "int32",
                            "example": 200
                          },
                          "object_id": {
                            "type": "integer",
                            "format": "int64",
                            "example": 38383744,
                            "description": "Object ID. This is a commbox generated number (optional)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Provider returned failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 206
                    },
                    "description": {
                      "type": "string",
                      "example": "Missing template parameter"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "recipient": {
                                "type": "string",
                                "description": "Recipient number",
                                "example": 972546663529
                              },
                              "id": {
                                "type": "string",
                                "example": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ"
                              },
                              "status": {
                                "type": "integer",
                                "format": "int32",
                                "example": 200
                              },
                              "object_id": {
                                "type": "integer",
                                "format": "int64",
                                "example": 38383744,
                                "description": "Object ID. This is a commbox generated number (optional)"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "recipient": {
                                "type": "string",
                                "description": "Recipient number",
                                "example": 972546663529
                              },
                              "status": {
                                "type": "integer",
                                "format": "int32",
                                "example": 400
                              },
                              "failed": {
                                "type": "object",
                                "example": "invalid — Not a valid WhatsApp user"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provider returned failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 400
                    },
                    "description": {
                      "type": "string",
                      "example": "Missing parameter template_name"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "recipient": {
                                "type": "string",
                                "description": "Recipient number",
                                "example": 972546663529
                              },
                              "status": {
                                "type": "integer",
                                "format": "int32",
                                "example": 400
                              },
                              "failed": {
                                "type": "object",
                                "example": "invalid — Not a valid WhatsApp user"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/whatsapp/uploadmedia/{ENCRYPTED_STREAM_ID}": {
      "post": {
        "tags": [
          "WhatsApp"
        ],
        "summary": "Returns a WhatsApp ID for an uploaded file",
        "description": "This API returns the name of an uploaded file (doc/image/video) and the generated ID for it. The ID can then be used in any requests to retrieve the media stored in the WhatsApp Business API client.",
        "operationId": "Upload_A_File_And_Get_Id_For_Uploaded_File",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "pic": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ENCRYPTED_STREAM_ID",
            "in": "path",
            "description": "CommBox generated encryption for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ENCRYPTED_STREAM_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string",
                            "example": "video_sample.mp4"
                          },
                          "id": {
                            "type": "string",
                            "example": "257250616863050"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/whatsapp/validatecontact/{ENCRYPTED_STREAM_ID}/{PHONE_NUMBER}": {
      "get": {
        "tags": [
          "WhatsApp"
        ],
        "summary": "Validate WhatsApp account",
        "description": "### Validate WhatsApp Account\nAs a business, you must provide customers with the option to opt in and receive WhatsApp communications, as well as stating your business name in a clear opt-in flow process.<br>After the customer opts in, use the contacts node to validate the registered number.<br><br> For more information, visit: <https://developers.facebook.com/docs/whatsapp/guides/opt-in/><br><br><b>Note: Checking too many phone numbers without sending them messages will lead to WA banning you.</b><br>Only verify phone numbers critical to your business that you have already received opt-in for.",
        "operationId": "Validate_WhatsApp_Acoount",
        "parameters": [
          {
            "name": "ENCRYPTED_STREAM_ID",
            "in": "path",
            "description": "CommBox generated encryption for the channel",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/ENCRYPTED_STREAM_ID/schema"
            }
          },
          {
            "name": "PHONE_NUMBER",
            "in": "path",
            "description": "Valid PHONE_NUMBER",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/PHONE_NUMBER/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/emarsys/sendwhatsapptemplate/{ENCRYPTED_STREAM_ID}": {
      "post": {
        "tags": [
          "WhatsApp"
        ],
        "summary": "Send a WhatsApp template message from Emarsys",
        "description": "API that enables Emarsys automation workflows to send pre-approved WhatsApp templates to recipients. This specialized endpoint processes webhook data from Emarsys using a simplified flat key-value format, allowing seamless integration between Emarsys marketing automations and WhatsApp business messaging via CommBox.\n",
        "operationId": "EmarsysSendWhatsAppTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "ENCRYPTED_STREAM_ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The encrypted stream identifier for your WhatsApp channel in CommBox"
          }
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhatsAppEmarsysTemplateRequest"
              },
              "examples": {
                "basicTemplate": {
                  "summary": "Basic text-only template",
                  "value": {
                    "to": "9725551234",
                    "templateName": "simple_notification",
                    "template.language.code": "en"
                  }
                },
                "templateWithBodyParams": {
                  "summary": "Template with body parameters",
                  "value": {
                    "to": "9725551234",
                    "templateName": "multiple_params_in_body",
                    "template.language.code": "en_GB",
                    "body.1.value": "https://www.commbox.io",
                    "body.2.value": "Product Launch",
                    "body.3.value": "March 15th"
                  }
                },
                "templateWithHeaderParam": {
                  "summary": "Template with text header and body parameter",
                  "value": {
                    "to": "9725551234",
                    "templateName": "text_header_body",
                    "template.language.code": "en",
                    "header.type": "text",
                    "header.value": "Important Update",
                    "body.1.value": "Your order has shipped"
                  }
                },
                "documentAttachment": {
                  "summary": "Template with document attachment",
                  "value": {
                    "to": "9725551234",
                    "templateName": "document_template",
                    "template.language.code": "en_US",
                    "header.type": "document",
                    "header.value": "https://www.example.com/resources/document.pdf",
                    "header.filename": "product-catalog.pdf",
                    "body.1.value": "Our latest catalog"
                  }
                },
                "imageAttachment": {
                  "summary": "Template with image attachment",
                  "value": {
                    "to": "9725551234",
                    "templateName": "image_template",
                    "template.language.code": "en",
                    "header.type": "image",
                    "header.value": "https://www.example.com/images/product.jpg",
                    "body.1.value": "Check out our new product!"
                  }
                },
                "imageAttachmentWithMediaId": {
                  "summary": "Template with image attachment using Media ID",
                  "value": {
                    "to": "9725551234",
                    "templateName": "image_template",
                    "template.language.code": "en",
                    "header.type": "image",
                    "header.value": "913225593849516",
                    "body.1.value": "Check out our new product!"
                  }
                },
                "videoAttachment": {
                  "summary": "Template with video attachment",
                  "value": {
                    "to": "9725551234",
                    "templateName": "video_template",
                    "template.language.code": "en",
                    "header.type": "video",
                    "header.value": "https://www.example.com/videos/product-demo.mp4",
                    "body.1.value": "Product demonstration"
                  }
                },
                "videoAttachmentWithMediaId": {
                  "summary": "Template with video attachment using Media ID",
                  "value": {
                    "to": "9725551234",
                    "templateName": "video_template",
                    "template.language.code": "en",
                    "header.type": "video",
                    "header.value": "27f8b007-7750-418e-9852-b4f8b7f95b9f",
                    "body.1.value": "Product demonstration"
                  }
                },
                "documentAttachmentWithMediaId": {
                  "summary": "Template with document attachment using Media ID",
                  "value": {
                    "to": "9725551234",
                    "templateName": "document_template",
                    "template.language.code": "en",
                    "header.type": "document",
                    "header.value": "550197337025434",
                    "header.filename": "file-sample_150kB.pdf",
                    "body.1.value": "PDF document"
                  }
                },
                "dynamicButton": {
                  "summary": "Template with dynamic URL button",
                  "value": {
                    "to": "9725551234",
                    "templateName": "dynamic_url",
                    "template.language.code": "en",
                    "button.value": "https://www.commbox.io/support?user=12345",
                    "body.1.value": "Click for support"
                  }
                },
                "callButton": {
                  "summary": "Template with Call a Phone Number button",
                  "value": {
                    "to": "9725551234",
                    "templateName": "Call_a_phone_num_btn",
                    "template.language.code": "en"
                  }
                },
                "multipleButtons": {
                  "summary": "Template with Call and Visit Website buttons",
                  "value": {
                    "to": "9725551234",
                    "templateName": "Call_and_Visit_a_Website_btns",
                    "template.language.code": "en"
                  }
                },
                "staticUrlButton": {
                  "summary": "Template with Static URL button",
                  "value": {
                    "to": "9725551234",
                    "templateName": "static_url",
                    "template.language.code": "en",
                    "body.1.value": "Your Name"
                  }
                },
                "quickReplyButtons": {
                  "summary": "Template with Quick Reply buttons",
                  "value": {
                    "to": "9725551234",
                    "templateName": "3 buttons",
                    "template.language.code": "en",
                    "body.1.value": "Your Name"
                  }
                },
                "authTemplate": {
                  "summary": "Authentication template with copy button",
                  "value": {
                    "to": "9725551234",
                    "templateName": "auth_template",
                    "template.language.code": "en",
                    "button.value": "COPY",
                    "body.1.value": "455455"
                  }
                },
                "createConversationObject": {
                  "summary": "Template with conversation object creation",
                  "value": {
                    "to": "9725551234",
                    "templateName": "customer_support",
                    "template.language.code": "en",
                    "body.1.value": "Order #12345",
                    "object.substreamid": 0,
                    "object.statusid": 1,
                    "object.content": "{\"orderId\":\"12345\"}",
                    "object.user.uniqueid": "67890",
                    "object.user.lastname": "Doe",
                    "object.user.firstname": "John",
                    "object.user.phone1": "9725551234",
                    "object.user.email": "john.doe@example.com",
                    "object.user.remarks": "Returning customer"
                  }
                },
                "documentWithObjectData": {
                  "summary": "Document template with conversation object creation",
                  "value": {
                    "to": "9725551234",
                    "templateName": "doc1",
                    "template.language.code": "en",
                    "header.type": "document",
                    "header.value": "https://denverzoo.org/wp-content/uploads/2018/09/African-lion.pdf",
                    "header.filename": "African-lion.pdf",
                    "body.1.value": "hello",
                    "object.substreamid": 0,
                    "object.statusid": 1,
                    "object.content": "{}",
                    "object.user.uniqueid": "01234567",
                    "object.user.lastname": "Doe",
                    "object.user.firstname": "John",
                    "object.user.phone1": "9725551234",
                    "object.user.email": "john.doe@example.com",
                    "object.user.remarks": "some remark for user"
                  }
                },
                "scheduledMessage": {
                  "summary": "Scheduled template message",
                  "value": {
                    "to": "9725551234",
                    "templateName": "reminder",
                    "template.language.code": "en",
                    "body.1.value": "appointment tomorrow",
                    "schedule": 1739365010
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WhatsAppEmarsysTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "status": "200",
                  "description": "Operation successful",
                  "response_time": "2024-08-06T07:51:52.2581942Z",
                  "data": [
                    {
                      "recipient": "9725551234",
                      "id": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ",
                      "status": 200,
                      "object_id": 38383744
                    }
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Partial success (some messages succeeded, some failed)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSuccessResponse"
                },
                "example": {
                  "status": "206",
                  "description": "Some messages failed",
                  "response_time": "2024-08-06T07:51:52.2581942Z",
                  "data": [
                    {
                      "recipient": "9725551234",
                      "id": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ",
                      "status": 200,
                      "object_id": 38383744
                    },
                    {
                      "recipient": "9725559876",
                      "status": 400,
                      "failed": "invalid — Not a valid WhatsApp user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request, could not process the input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "400",
                  "description": "Missing parameter templateName",
                  "response_time": "2024-08-06T07:51:52.2581942Z",
                  "data": [
                    {
                      "recipient": "9725551234",
                      "status": 400,
                      "failed": "Missing required parameter"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The supplied JWT credentials are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/whatsapp/campaign": {
      "post": {
        "tags": [
          "WhatsApp"
        ],
        "summary": "Send Campaign",
        "description": "This API enables the sending of WhatsApp campaigns using pre-approved templates that do not include body parameters (header image, textual placeholders, etc.).<br> Request body parameters includes a CSV or Excel file with the target audience.<br><br>**Note:** The file must include a column named **phone1**, where all phone numbers are formatted with the full country code (e.g., 442079832100 for the UK).<br><br>Must include an approved template with the proper WhatsApp language code.",
        "operationId": "send_campaigns",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "audience_file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The CSV or Excel file with the phone numbers.<br>Example:aud1.csv"
                  },
                  "notify_mail": {
                    "type": "string",
                    "description": "The email address of the agent receiving the confirmation"
                  },
                  "scheduled_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "(Optional) When left empty, campaign will be sent immediately. Use Unix format"
                  },
                  "expiration_data": {
                    "type": "string",
                    "format": "date-time",
                    "description": "(Optional) The campaign end date and time. Use Unix format"
                  },
                  "save_as_new_audience": {
                    "type": "boolean",
                    "example": true,
                    "description": "(Optional) When true, audience will be saved to the DB"
                  },
                  "template_name": {
                    "type": "string",
                    "description": "Template must be an approved template"
                  },
                  "language_code": {
                    "type": "string",
                    "description": "Must use WA language code that match the template's language.<br>For example:en_uk"
                  },
                  "campaign_name": {
                    "type": "string",
                    "description": "(Optional) Enter the title of the campaign"
                  },
                  "audience_id": {
                    "type": "string",
                    "description": "(Optional) Add the title of existing audience from the DB for sending the campaign"
                  },
                  "stream_id": {
                    "type": "string",
                    "description": "A CommBox generated number for the channel from which the campaign will be send"
                  },
                  "substream_id": {
                    "type": "string",
                    "description": "(Optional) A CommBox generated number for the subchannel"
                  },
                  "automation_script_id": {
                    "type": "string",
                    "description": "(Optional) Enter the script ID (flow) to which responding customers will be directed.<br>Navigate to Settings > Automation Flow module, and select the desired flow. The Id is listed under the flow's name after you select it"
                  },
                  "new_audience_name": {
                    "type": "string",
                    "description": "(Optional) Name of the audience in the uploaded file"
                  }
                },
                "example": {
                  "audience_file": "aud1.csv",
                  "notify_mail": "eddie.doe@commbox.io",
                  "scheduled_date": "2025-01-22T11:15:55Z",
                  "expiration_data": "2025-01-22T11:45:55",
                  "template_name": "end_of_year_sale",
                  "language_code": "en_uk",
                  "campaign_name": "Sales_campaign",
                  "audience_id": "NE_USA-above50",
                  "stream_id": "1558"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Campaign created"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2025-01-22T11:15:55.0822473Z"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get Tags",
        "description": "This API returns a list of all Tags in the account/brand as recognized by the authentication.<br>Data includes the tag's Id number, name (identity id), and type (as a code).  A listing of Tag types is found in the Enum section in the Getting Started section.<br>",
        "operationId": "get_tags",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "identityId": {
                                "type": "string",
                                "example": "test"
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": null
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 2
                              },
                              "identityId": {
                                "type": "string",
                                "example": "test2"
                              },
                              "streamProviderId": {
                                "type": "string",
                                "example": null
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create a Tag",
        "description": "This API creates a new tag, where the name/content of the tag is part of the body parameters.<br>If you want this new tag to be part of a group of tags, you’ll need to place the group Id in the TagGroupId field.<br><br> Tags can be attached to a conversation (object), to a specific comment or a reply (child), or to a customer (user). Set the tag’s attachment options in the boolean parameters (true/false)<br><br>The API returns Tag Id.",
        "operationId": "Create_tag",
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "Name": {
                        "type": "string"
                      },
                      "TagGroupId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "ObjectTag": {
                        "type": "boolean",
                        "example": true
                      },
                      "UserTag": {
                        "type": "boolean",
                        "example": false
                      },
                      "ChildTag": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": 21221
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters may not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/tags/{TAG_ID}": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Updating a Tag",
        "description": "This API updates/changes the name/content of a tag.<br> The tag’s Id is required as part of the URL. The actual changes to the tag are part of the Body Params - the new name/content and the associated group (optional).<br>",
        "operationId": "Update_tag",
        "parameters": [
          {
            "name": "TAG_ID",
            "in": "path",
            "description": "Tag ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAG_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "Name": {
                        "type": "string",
                        "example": "TAG Name"
                      },
                      "Tag Group Id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 123
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete a Tag",
        "description": "This API deletes a tag.<br> The tag’s Id is required as part of the URL.<br> Obtain a list of tags and their Ids with [GET]  Get Tags - https://api.commbox.io/tags",
        "operationId": "Delete_tag",
        "parameters": [
          {
            "name": "TAG_ID",
            "in": "path",
            "description": "Tag Id is a CommBox unique identifier.",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAG_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/tags/groups": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get Tags Group",
        "description": "A few tags with similar purposes, or originating teams, can be grouped together by the organization.<br>This API lists all the Tags Groups in the account. The API does not list the specific tags within each group.",
        "operationId": "Get_Tags_Group",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "test"
                              },
                              "brandId": {
                                "type": "string",
                                "example": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "example": "test2"
                              },
                              "brandId": {
                                "type": "string",
                                "example": 1
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tags Group",
        "description": "A few tags with similar purposes or originating teams can be grouped together by the organization.<br>This API creates the name of the group of tags and returns a Tags Group Id.<br><br> To add tags to this new group, use the **Create Tag API** or the **Update Tag API**.",
        "operationId": "Create_Tags_Group",
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "Name": {
                        "type": "string",
                        "example": "Group's name"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": 21221
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/tags/groups/{TAGS_GROUP_ID}": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Update Tags Group",
        "description": "A few tags with similar purposes or originating team can be grouped together by the organization.<br>This API lets you change the name of such a group of tags.<br>All the tags associated with the old name of the tags group will now be associated with the new name.<br><br>The Tags Group Id is required.<br>\nTo add a specific tag to the new group, use the **Update Tag API** (Tag’s Id required).<br> To delete a specific tag from the new group, use the **Delete Tag API** (Tag’s Id required).<br>",
        "operationId": "Update_tags_group",
        "parameters": [
          {
            "name": "TAGS_GROUP_ID",
            "in": "path",
            "description": "Tags Group Id. is a CommBox unique identifier",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAGS_GROUP_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "Name": {
                        "type": "string",
                        "example": "TAG's Name"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete a Tags group",
        "description": "This API deletes a Tags Group - Group ID is required.<br>Use the **Get Tags Group** API to obtain a list of tags group names and their Id. <br><br>**Note:** Deleting a group of tags will delete all tags included in that group.",
        "operationId": "Delete_tags_group",
        "parameters": [
          {
            "name": "TAGS_GROUP_ID",
            "in": "path",
            "description": "TAGS_GROUP_ID",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/TAGS_GROUP_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/forms/createlink/{FORM_ID}": {
      "post": {
        "tags": [
          "Forms"
        ],
        "summary": "Get New Form Link",
        "description": "### Parameters\nForm ID – Form number (as seen in the forms list screen).</br>Data – A Json string consists of the following fields:</br><ul><li>streamProviderId – Customer phone number or email  (which will be receiving the form)</br><li> streamProviderType – Identifies which type of value (phone or email) the streamProviderId contains, 4 is email, 5 is phone number.</br><li> referringObjectId (optional) – When the form link is opened a new form object is created in the system, this object can be linked to another object, for example a chat  conversation, so once the form is filled by the customer you will see (in the manage system) the chat conversation with an indicator of the filled form.</br><li> properties (optional) – a Json string contains initial values for the form fields, so when the customer will open the form its fields will contain those values.</ul> The format is as follows: {“FIELD 1 NAME”: “FIIELD 1 VALUE”, “FIELD 2 NAME”: “FIELD 2 VALUE”, etc…}</br> Note: You can store your own parameters (which will not affect the form), so when the form is signed you will receive them in the OnSubmit event.",
        "operationId": "Get_New_Form_Link",
        "parameters": [
          {
            "name": "FORM_ID",
            "in": "path",
            "description": "Form Id - Form number (as seen on the forms list screen)",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/FORM_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "streamProviderId": {
                        "type": "string",
                        "example": "9725051234567"
                      },
                      "streamProviderType": {
                        "type": "integer",
                        "example": 5
                      },
                      "referringObjectId": {
                        "type": "integer",
                        "format": "int64",
                        "example": 12345
                      },
                      "properties": {
                        "type": "object",
                        "properties": {
                          "field_0": {
                            "type": "string",
                            "example": "John"
                          },
                          "field_1": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "my_own_param": {
                            "type": "string",
                            "example": 123456
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "string",
                      "example": "https://apps.commbox.io/form/commbox/499fdc93aa804a4b8266251224944d6a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/auth/ticket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "summary": "Create Ticket",
        "description": "The Ticket Authentication API allows organizations to grant users access to the CommBox platform while bypassing standard authentication methods. The Ticket API returns a session cookie that is added to the login URL. You can limit the token’s lifespan when making the API call or by configuring it in the Privacy and Security module in the CommBox paltform.<Br><br>**Agent Login Bypass**<br>To bypass the login page without entering the agent’s credentials, append the session cookie returned by the API to the login URL:<br><br>Format: Login URL / ?ta= / authentication token (without the quotation marks)<br>Example: https://commbox.com/login?TA=9M3Wg_fALiPm2gUeX2FinOJz...<br><br>**Customer Chat Access**<br>To start the chat without manual identification, append the session cookie to the chat login page URL:<br><br>Format: Brand URL / chat / the channel ID in the encrypted code / ?ta= / authentication token (without the quotation marks)<br>Example: https://apps.commbox.com/chat/nex9tHPKdBkD_fAfbuUPABg%3d%3d?ta=9M3Wg_fALiPm2gUeX...<br><br>**OverrideUserInfo** – Optional param for editing the Customer Information record at login.<br>**OneTimeUse** – Optional param that limits the token to one usage.<br><br>Learn more: [https://help.commbox.io/docs/ticket-authentication](https://help.commbox.io/docs/ticket-authentication)        ",
        "operationId": "Create_Ticket",
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "brand": {
                        "type": "string",
                        "example": "commbox"
                      },
                      "username": {
                        "type": "string",
                        "description": "Applicable only for agent authentication; found in the agent’s record",
                        "example": "john.d"
                      },
                      "email": {
                        "type": "string",
                        "description": "For agent authentication this is a strong identifier that has to match email on record",
                        "example": "john.d@gmail.com"
                      },
                      "uniqueId": {
                        "type": "string",
                        "example": 123456
                      },
                      "firstName": {
                        "type": "string",
                        "example": "John"
                      },
                      "lastName": {
                        "type": "string",
                        "example": "Doe"
                      },
                      "phone1": {
                        "type": "string",
                        "description": "Phone must include country code. For agent authentication this is a strong identifier that has to match phone on record",
                        "example": 442501234567
                      },
                      "overrideUserInfo": {
                        "type": "boolean",
                        "description": "(Optional) Applicable for Customer Chat Access. When true, The Customer Information record is updated with data included in the API call.",
                        "example": true
                      },
                      "oneTimeUse": {
                        "type": "boolean",
                        "description": "(Optional) When true, the API generates a single-use ticket.",
                        "example": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2025-01-19T14:18:47.63079Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "encpryptedString": {
                          "type": "string",
                          "example": "hZ8uTCLgf1HnOwVy_bIEWVJD0VXnIcbMKTT9R6_bW0prs_fYgzbzQCRMpdPZw1FopLHoGJG0VUDFk3zYEfkG_fEf9hnk50lR72BZHp7X_f94jZQbJNP4ysWmRJ3Lq9Q245j3D"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/automation/objects/{OBJECT_ID}/context": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get Object Context",
        "description": "Returns object data context. <b>Must include desierd data propertie for query (comma separated)</b> </br></br> Example</br> https://api.commbox.io/automation/objects/{OBJECT_ID}/context?<b>properties=data.plus,data.name",
        "operationId": "Get_Object_Context",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "data.plus": {
                          "type": "string",
                          "example": "4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      },
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Insert Data Context",
        "description": "Insert data context to conversation",
        "operationId": "Insert_Data_Context",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "Object ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "properties": {
                        "type": "object",
                        "properties": {
                          "plus": {
                            "type": "integer",
                            "example": 3
                          },
                          "name": {
                            "type": "string",
                            "example": "John"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": 21221
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    },
    "/automation/objects/{OBJECT_ID}/context/jump": {
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Jump to node",
        "description": "Jump to node",
        "operationId": "JUMP_TO_NODE",
        "parameters": [
          {
            "name": "OBJECT_ID",
            "in": "path",
            "description": "OBJECT ID. This is a commbox generated number",
            "required": true,
            "schema": {
              "$ref": "#/components/parameters/OBJECT_ID/schema"
            }
          }
        ],
        "requestBody": {
          "description": "Optional description for new mail object in  *Markdown*",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "example": "4079:n_8"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": 200
                    },
                    "description": {
                      "type": "string",
                      "example": "Operation successful"
                    },
                    "response_time": {
                      "type": "string",
                      "example": "2024-08-06T07:51:52.2581942Z"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server. Incoming parameters might not be valid"
          },
          "401": {
            "description": "Unauthorized - The supplied credentials, if any, are not sufficient to access the resource"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "429": {
            "description": "Too Many Requests - Too many requests have been made in a short period of time (Throttling)"
          },
          "500": {
            "description": "Server Error - The server could not return the representation due to an internal server error"
          },
          "501": {
            "description": "Not Implemented - The requested operation is not supported"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "API key is needed to authorize requests. You can get your API key via the management console. </br><b> A Bearer Token is needed to be set in the Authorization header of every API call.</b></br> For additional support you can contact us."
      },
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authentication. The token should be generated using the Secret Key\nprovided in the CommBox Emarsys Module settings.\n"
      }
    },
    "parameters": {
      "STREAM_ID": {
        "name": "STREAM_ID",
        "in": "query",
        "description": "A CommBox generated number for the communication channel",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "OBJECT_ID": {
        "name": "OBJECT_ID",
        "in": "query",
        "description": "A CommBox generated number for the conversation",
        "schema": {
          "type": "integer",
          "format": "int64",
          "description": "Object ID is a CommBox generated number for the conversation"
        }
      },
      "STATUS_ID": {
        "name": "STATUS_ID",
        "in": "query",
        "description": "STATUS ID",
        "schema": {
          "type": "integer"
        }
      },
      "USER_ID": {
        "name": "USER_ID",
        "in": "query",
        "description": "USER ID",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "TAG_ID": {
        "name": "TAG_ID",
        "in": "query",
        "description": "TAG ID",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "TAGS_GROUP_ID": {
        "name": "TAGS_GROUP_ID",
        "in": "query",
        "description": "TAGS GROUP ID",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "INDICATOR_ID": {
        "name": "INDICATOR_ID",
        "in": "query",
        "description": "Custom indicator Id",
        "schema": {
          "type": "string"
        }
      },
      "MANAGER_ID": {
        "name": "MANAGER_ID",
        "in": "query",
        "description": "The Manager (agent) Id",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "PROFILE_ID": {
        "name": "PROFILE_ID",
        "in": "query",
        "description": "Profile Id",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "TEAM_ID": {
        "name": "TEAM_ID",
        "in": "query",
        "description": "Team Id",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "ACTIVITY_ID": {
        "name": "ACTIVITY_ID",
        "in": "query",
        "description": "See ObjectActivityType Enum",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "FORM_ID": {
        "name": "FORM_ID",
        "in": "query",
        "description": "Form Id - Form number",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "userIdentityId": {
        "name": "userIdentityId",
        "in": "query",
        "description": "A CommBox generated number for the user. Returns objects created by this user",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "identityStreamProviderId": {
        "name": "identityStreamProviderId",
        "in": "query",
        "description": "To returns objects created by a user, enter the StreamProviderId found at the identity section. Must supply identityStreamProviderType as well.",
        "schema": {
          "type": "string"
        }
      },
      "ENCRYPTED_STREAM_ID": {
        "name": "ENCRYPTED_STREAM_ID",
        "in": "query",
        "description": "CommBox generated encryption for the channel",
        "schema": {
          "type": "string"
        }
      },
      "PHONE_NUMBER": {
        "name": "PHONE_NUMBER",
        "in": "query",
        "description": "Valid PHONE_NUMBER. Should include country and area code",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "identityStreamProviderType": {
        "name": "identityStreamProviderType",
        "in": "query",
        "description": "See Enum. To returns objects created by a user, enter the StreamProviderType found at the identity section. Must supply  identityStreamProviderId as well.",
        "schema": {
          "type": "string",
          "format": "short"
        }
      },
      "subStream": {
        "name": "subStream",
        "in": "query",
        "description": "The subchannel Id (Optional, default 0)",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Sort of return objects (optional, default desc). Possible values: desc, asc",
        "schema": {
          "type": "string"
        }
      },
      "order": {
        "name": "order",
        "in": "query",
        "description": "Order of return objects (optional, default createdtime). Possible values: createdtime, closedtime, prioritytime, updatedtime",
        "schema": {
          "type": "string"
        }
      },
      "includeChilds": {
        "name": "includeChilds",
        "in": "query",
        "description": "Return objects with their childs (optional, default false)",
        "schema": {
          "type": "boolean"
        }
      },
      "includeActivityLog": {
        "name": "includeActivityLog",
        "in": "query",
        "description": "Return objects with their activity log (optional, default false)",
        "schema": {
          "type": "boolean"
        }
      },
      "timeFilter": {
        "name": "timeFilter",
        "in": "query",
        "description": "Determines which object datetime field affects unixStartTime & unixEndTime (optional, relevant only for ElasticSearch)",
        "schema": {
          "type": "string"
        }
      },
      "pageNumber": {
        "name": "pageNumber",
        "in": "query",
        "description": "Used for paging results (optional)",
        "schema": {
          "type": "integer"
        }
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "description": "Used for paging results (optional, default 100)",
        "schema": {
          "type": "integer"
        }
      },
      "status": {
        "name": "status",
        "in": "query",
        "description": "ObjectStatusType - see Enums for code.<br> Returned objects must have selected statuses in a comma separated list<br> (Optional, default all)",
        "schema": {
          "type": "string"
        }
      },
      "unixStartTime": {
        "name": "unixStartTime",
        "in": "query",
        "description": "Unix time stamp (UTC) of starting date and time of query. <br> Must be sent with unixEndTime",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "unixEndTime": {
        "name": "unixEndTime",
        "in": "query",
        "description": "Unix time stamp (UTC) of ending date and time of query. <br>Must be sent with unixStartTime",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "schemas": {
      "Object": {
        "type": "object",
        "properties": {
          "SubStreamId": {
            "type": "integer",
            "format": "int64",
            "description": "The subchannel ID of the conversation"
          },
          "Type": {
            "type": "integer",
            "format": "int64",
            "description": "The type of object used (text, link, photo, etc.)- See Enum for code"
          },
          "StatusId": {
            "type": "string",
            "description": "The conversation’s current state (Open, Resolved, etc.) – See Enum for code"
          },
          "StreamProviderType": {
            "type": "integer",
            "format": "int64",
            "description": "Type of the object original stream provider"
          },
          "StreamProviderId": {
            "type": "string",
            "description": "A CommBox generated number for the original stream provider"
          },
          "UserStreamProviderId": {
            "type": "string",
            "description": "unique identifier of user, usually an email or a phone number, as it appears at the original provider"
          },
          "UserStreamProviderType": {
            "type": "integer",
            "format": "int64",
            "description": "Type of identifier used in of the userStreamProviderId parameter"
          },
          "UserIdentity": {
            "type": "integer",
            "format": "int64",
            "description": "A CommBox generated number for the user."
          },
          "ManagerId": {
            "type": "integer",
            "format": "int64",
            "description": "The manager (agent) who create the object (optional)"
          },
          "Content": {
            "type": "string",
            "format": "JSON string",
            "description": "String containing extended properties of the object"
          },
          "Message": {
            "type": "string",
            "description": "<b>(required)</b> The text of the primary message. Required field"
          },
          "sendToClient": {
            "type": "boolean",
            "description": "When true, will send SMS messages without saving them <b>(relevant for SMS streams only)</b>"
          },
          "User": {
            "type": "object",
            "description": "The customer (end-user) of the object"
          }
        }
      },
      "Object_Child": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int64",
            "description": "The type of the object. See Enum"
          },
          "IsManager": {
            "type": "boolean",
            "description": "Indicates whether the message is from the agent or admin (true) or from a customer (false)"
          },
          "UserIdentity": {
            "type": "integer",
            "description": "Enter the agent's user ID. Ignore when creating customer's message. Get the agent's User ID by using the Get Managers API"
          },
          "UserStreamProviderId": {
            "type": "string",
            "description": "The email or phone number of the person you are sending the message on their behalf"
          },
          "UserStreamProviderType": {
            "type": "integer",
            "description": "The channel type’s code. See Enum "
          },
          "Message": {
            "type": "string",
            "description": "The message on behalf of the agent / customer"
          }
        }
      },
      "ObjectActivityLog": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content in the activity log"
          },
          "Source": {
            "type": "string",
            "description": "The source of the activity log (optional)"
          },
          "ManagerId": {
            "type": "integer",
            "format": "int64",
            "description": "The agent who initialize the activity log (optional)"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "description": "Tag ID. This is a commbox generated number"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "description": "User ID. This is a commbox generated number for the customer"
          },
          "UniqueId": {
            "type": "string",
            "format": "50",
            "description": "User’s unique identifier. This can be an email, social security number or any other type of unique string determined by the brand administrators"
          },
          "Phone1": {
            "type": "string",
            "format": "numeric string (20)",
            "description": "User’s phone number (should include country and area code without leading + or 00)"
          },
          "Phone2": {
            "type": "string",
            "format": "numeric string (20)",
            "description": "User’s additional phone number (should include country and area code without leading + or 00)"
          },
          "Email": {
            "type": "string",
            "format": "255",
            "description": "User's Email."
          },
          "FirstName": {
            "type": "string",
            "format": "100",
            "description": "User’s first name"
          },
          "LastName": {
            "type": "string",
            "format": "100",
            "description": "User’s last name"
          },
          "Gender": {
            "type": "string",
            "format": "1",
            "description": "User’s gender (‘M’ for male, ‘F’ for female)"
          },
          "Locale": {
            "type": "object",
            "description": "User’s locale"
          },
          "Birthday": {
            "type": "string",
            "format": "date",
            "description": "User’s birthday"
          },
          "NumIdentities": {
            "type": "integer",
            "description": "Number of active identities that are connected to this user"
          },
          "IsManager": {
            "type": "boolean",
            "description": "Indicates whether this user is a agent or an admin (true) or a customer (false)"
          },
          "Remarks": {
            "type": "string",
            "description": "Free text containing general remarks about the user"
          },
          "Identity": {
            "type": "object",
            "description": "Identity object that is connected to the user"
          }
        }
      },
      "User_Info": {
        "type": "object",
        "properties": {
          "UniqueId": {
            "type": "string",
            "format": "50",
            "description": "User’s unique identifier. This can be an email, social security number or any other type of unique string determined by the brand administrators"
          },
          "FirstName": {
            "type": "string",
            "format": "100",
            "description": "User’s first name"
          },
          "LastName": {
            "type": "string",
            "format": "100",
            "description": "User’s last name"
          },
          "Email": {
            "type": "string",
            "format": "255",
            "description": "User's Email."
          },
          "Phone1": {
            "type": "string",
            "format": "100",
            "description": "User’s main phone number"
          },
          "Phone2": {
            "type": "string",
            "format": "100",
            "description": "User’s secondary phone number"
          },
          "Remarks": {
            "type": "string",
            "description": "Free text containing general remarks about the user"
          },
          "Content": {
            "type": "object",
            "properties": {
              "BirthDate": {
                "type": "string",
                "description": "This is an example of Custom Field"
              },
              "VipStatus": {
                "type": "string",
                "description": "This is an example of Custom Field"
              }
            }
          }
        }
      },
      "User_Identity": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "description": "Identity ID. This is a commbox generated number and used throughout all the updates"
          },
          "StreamProviderId": {
            "type": "string",
            "format": "255",
            "description": "unique identifier of user, usually an email or a phone number, as it appears at the original provider"
          },
          "StreamProviderType": {
            "type": "integer",
            "format": "int64",
            "description": "Type of the original provider - see Enum"
          },
          "StreamProviderEmail": {
            "type": "string",
            "format": "255",
            "description": "Identity’s email as it appears at the original provider"
          },
          "UserName": {
            "type": "string",
            "format": "100",
            "description": "Identity’s user name as it appears at the original provider"
          },
          "FirstName": {
            "type": "string",
            "format": "100",
            "description": "Identity’s first name as it appears at the original provider"
          },
          "LastName": {
            "type": "string",
            "format": "100",
            "description": "Identity’s last name as it appears at the original provider"
          },
          "ThumbnailUrl": {
            "type": "string",
            "format": "255",
            "description": "Link to the identity’s profile image"
          },
          "NumObjects": {
            "type": "integer",
            "description": "Number of objects connected to this identity"
          }
        }
      },
      "Manager": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "description": "Manager ID. This is a commbox generated number and used throughout all the updates"
          },
          "AsyncAssignedNoResponse": {
            "type": "integer",
            "description": "Current number of assigned asynchronous objects awaiting response"
          },
          "AsyncAssignedInProccess": {
            "type": "integer",
            "description": "Current number of assigned asynchronous objects that are being addressed by the manager"
          },
          "SyncAssignedNoResponse": {
            "type": "integer",
            "description": "Current number of assigned synchronous objects awaiting response (Chat/messenger conversations)"
          },
          "SyncAssignedInProccess": {
            "type": "integer",
            "description": "Current number of assigned synchronous objects that are being addressed by the manager (Chat/messenger conversations)"
          },
          "FaceToFaceStatus": {
            "type": "boolean",
            "description": "Returns true if the agent is busy with a face to face conversation (Voice/Video call)"
          },
          "TotalAsyncAssigned": {
            "type": "integer",
            "description": "Total number of currently assigned objects"
          },
          "TotalSyncAssigned": {
            "type": "integer",
            "description": "Total number of currently assigned synchronous objects (Chat/messenger conversations)"
          }
        }
      },
      "Object_custom_indicator": {
        "type": "object",
        "properties": {
          "IndicatorId": {
            "type": "string",
            "description": "Indicator id (unique name) – to allow updating/ deleting existing indicator"
          },
          "DisplayClass": {
            "type": "string",
            "description": "Indicator class. Mandatory only if Icon has not provided"
          },
          "Icon": {
            "type": "string",
            "description": "An icon for the indicator. Supports URL. Mandatory only if Icon has not provided (not relevant for DELETE operation)"
          },
          "Title": {
            "type": "string",
            "description": "A title for the indicator (not relevant for DELETE operation)"
          },
          "Link": {
            "type": "string",
            "description": "Optional link for the indicator (not relevant for DELETE operation)"
          }
        }
      },
      "WhatsApp_template": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "string",
            "description": "(Optional) Enter a Unix timestamp code for the desired scheduled date. Leaving it empty will send the template immediately."
          },
          "to": {
            "type": "integer",
            "description": "The recipient's phone number in international format"
          },
          "template": {
            "type": "object",
            "description": "Template configuration",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the approved WhatsApp template"
              },
              "language": {
                "type": "object",
                "description": "Specifies the language of the template",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Language code used by Meta. For example 'en_us'"
                  }
                }
              }
            }
          },
          "componentsA": {
            "type": "object",
            "description": "Components may include the body, header, footer, and buttons of the template",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of component. In this example 'body'"
              },
              "parameters": {
                "type": "object",
                "description": "Represents a single parameter for the placeholder",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of parameter. WhatsApp supports \"text\", \"image\", “video”, and \"document\" parameters."
                  },
                  "text": {
                    "type": "string",
                    "description": "the text entered in the parameter for example \"John\""
                  }
                }
              }
            }
          },
          "componentsB": {
            "type": "object",
            "description": "Components may include the body, header, footer, and buttons of the template",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of component. In this example 'header'"
              },
              "parametersA": {
                "type": "object",
                "description": "Represents a single parameter for the placeholder",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of parameter (e.g. image). WhatsApp supports \"text\", \"image\", “video”, and \"document\" parameters."
                  },
                  "image": {
                    "type": "object",
                    "properties": {
                      "Link": {
                        "type": "string",
                        "description": "The URL for the image attachment (e.g. https://picsum.photos/200)."
                      },
                      "id": {
                        "type": "string",
                        "description": "Instead of the link, enter media id provided by META when using the Whatsapp_uploadMedia API (e.g. 1628862997611773)"
                      }
                    }
                  }
                }
              },
              "parametersB": {
                "type": "object",
                "description": "Represents a single parameter for the placeholder",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of parameter. WhatsApp supports \"text\", \"image\", “video”, and \"document\" parameters."
                  },
                  "video": {
                    "type": "object",
                    "properties": {
                      "Link": {
                        "type": "string",
                        "description": "The URL for the video attachment (e.g http://example.com/video.mp4)."
                      }
                    }
                  }
                }
              },
              "parametersC": {
                "type": "object",
                "description": "Represents a single parameter for the placeholder",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of parameter. WhatsApp supports \"text\", \"image\", “video”, and \"document\" parameters."
                  },
                  "document": {
                    "type": "object",
                    "properties": {
                      "Link": {
                        "type": "string",
                        "description": "The URL of the PDF attachment (e.g. https://denverzoo.org/wp-content/uploads/2018/09/African-lion.pdf)."
                      },
                      "filename": {
                        "type": "string",
                        "description": "The file's name (e.g. African-lion.pdf)"
                      }
                    }
                  }
                }
              }
            }
          },
          "object_data": {
            "type": "object",
            "required": [
              "createChildObject",
              "streamId",
              "SubStreamId",
              "StatusId",
              "ManagerId",
              "Content",
              "User"
            ],
            "properties": {
              "createChildObject": {
                "type": "boolean",
                "example": true
              },
              "streamId": {
                "type": "integer",
                "description": "The channel's ID"
              },
              "SubStreamId": {
                "type": "integer",
                "description": "The subchannel's ID. When there are no subchannels, value is 0",
                "example": 0
              },
              "StatusId": {
                "type": "integer",
                "description": "Status of conversation - see Enums",
                "example": 1
              },
              "ManagerId": {
                "type": "integer",
                "description": "ID of the agent",
                "example": 78121
              },
              "Content": {
                "type": "object",
                "description": "Content of the message"
              },
              "User": {
                "type": "object",
                "required": [
                  "Phone1",
                  "Email"
                ],
                "properties": {
                  "UniqueId": {
                    "type": "string",
                    "description": "Unique identifier of the customer such as Social Security number or national ID, or a unique ID generated by the organization",
                    "example": "01234567"
                  },
                  "LastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "FirstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "Phone1": {
                    "type": "string",
                    "description": "Phone number including country code",
                    "example": "442079834000"
                  },
                  "Email": {
                    "type": "string",
                    "format": "email",
                    "example": "John.D@gmail.com"
                  },
                  "Remarks": {
                    "type": "string",
                    "example": "Returning customer"
                  }
                }
              }
            }
          }
        }
      },
      "WhatsAppEmarsysTemplateRequest": {
        "type": "object",
        "required": [
          "to",
          "templateName",
          "template.language.code"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "The recipient's phone number with country code (no + symbol)",
            "example": "9725551234"
          },
          "templateName": {
            "type": "string",
            "description": "The name of the approved WhatsApp template",
            "example": "welcome_message"
          },
          "template.language.code": {
            "type": "string",
            "description": "The language code for the template",
            "example": "en"
          },
          "schedule": {
            "type": "integer",
            "description": "Unix timestamp for scheduled message delivery (optional)",
            "example": 1739365010
          },
          "header.type": {
            "type": "string",
            "description": "Type of header content (if template has a header)",
            "enum": [
              "text",
              "image",
              "document",
              "video"
            ],
            "example": "image"
          },
          "header.value": {
            "type": "string",
            "description": "Content for the header (URL or Media ID)",
            "example": "https://example.com/image.jpg"
          },
          "header.filename": {
            "type": "string",
            "description": "Filename for document attachments (required for document headers)",
            "example": "product-catalog.pdf"
          },
          "body.1.value": {
            "type": "string",
            "description": "Content for the first body placeholder",
            "example": "John"
          },
          "body.2.value": {
            "type": "string",
            "description": "Content for the second body placeholder",
            "example": "Premium Plan"
          },
          "body.3.value": {
            "type": "string",
            "description": "Content for the third body placeholder",
            "example": "March 15, 2025"
          },
          "button.value": {
            "type": "string",
            "description": "Dynamic value for button (if template has dynamic buttons)",
            "example": "https://example.com/support"
          },
          "object.substreamid": {
            "type": "integer",
            "description": "The substream ID in CommBox (for conversation object creation)",
            "example": 0
          },
          "object.statusid": {
            "type": "integer",
            "description": "The status ID in CommBox (for conversation object creation)",
            "example": 1
          },
          "object.content": {
            "type": "string",
            "description": "Additional content for the conversation object (JSON string)",
            "example": "{\"subject\":\"Welcome Message\"}"
          },
          "object.user.uniqueid": {
            "type": "string",
            "description": "Unique identifier for the user",
            "example": "12345678"
          },
          "object.user.lastname": {
            "type": "string",
            "description": "User's last name",
            "example": "Doe"
          },
          "object.user.firstname": {
            "type": "string",
            "description": "User's first name",
            "example": "John"
          },
          "object.user.phone1": {
            "type": "string",
            "description": "User's phone number",
            "example": "9725551234"
          },
          "object.user.email": {
            "type": "string",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "object.user.remarks": {
            "type": "string",
            "description": "Additional notes about the user",
            "example": "Returning customer"
          }
        },
        "additionalProperties": true,
        "description": "Request schema for sending WhatsApp template messages. The minimal required parameters are\nto, templateName, and template.language.code. Additional parameters depend on the template\nstructure and whether conversation objects should be created in CommBox.\n"
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code as string",
            "example": "200"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the response",
            "example": "Operation successful"
          },
          "response_time": {
            "type": "string",
            "description": "Timestamp of the response",
            "example": "2024-08-06T07:51:52.2581942Z"
          },
          "data": {
            "type": "array",
            "description": "Array of recipient results",
            "items": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "description": "Recipient's phone number",
                  "example": "9725551234"
                },
                "id": {
                  "type": "string",
                  "description": "Message ID from WhatsApp",
                  "example": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ"
                },
                "status": {
                  "type": "integer",
                  "description": "Status code for this recipient",
                  "example": 200
                },
                "object_id": {
                  "type": "integer",
                  "description": "CommBox conversation object ID (if created)",
                  "example": 38383744
                }
              }
            }
          }
        },
        "required": [
          "status",
          "description",
          "response_time",
          "data"
        ]
      },
      "PartialSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status code as string",
            "example": "206"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the response",
            "example": "Some messages failed"
          },
          "response_time": {
            "type": "string",
            "description": "Timestamp of the response",
            "example": "2024-08-06T07:51:52.2581942Z"
          },
          "data": {
            "type": "array",
            "description": "Array of recipient results (mix of success and failure)",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "recipient": {
                      "type": "string",
                      "example": "9725551234"
                    },
                    "id": {
                      "type": "string",
                      "example": "gBEGlyVGZjUpAgmyuqAHfxbHmnQ"
                    },
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "object_id": {
                      "type": "integer",
                      "example": 38383744
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "recipient": {
                      "type": "string",
                      "example": "9725559876"
                    },
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "failed": {
                      "type": "string",
                      "example": "invalid — Not a valid WhatsApp user"
                    }
                  }
                }
              ]
            }
          }
        },
        "required": [
          "status",
          "description",
          "response_time",
          "data"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status code as string",
            "example": "400"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the error",
            "example": "Missing parameter templateName"
          },
          "response_time": {
            "type": "string",
            "description": "Timestamp of the response",
            "example": "2024-08-06T07:51:52.2581942Z"
          },
          "data": {
            "type": "array",
            "description": "Array of recipient error details",
            "items": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "description": "Recipient's phone number",
                  "example": "9725551234"
                },
                "status": {
                  "type": "integer",
                  "description": "Error status code",
                  "example": 400
                },
                "failed": {
                  "type": "string",
                  "description": "Failure reason",
                  "example": "Missing required parameter"
                }
              }
            }
          }
        },
        "required": [
          "status",
          "description",
          "response_time"
        ]
      },
      "ObjectType": {
        "type": "string",
        "enum": [
          "Text = 0",
          "Link = 1",
          "Photo = 2",
          "Video = 3",
          "Conversation = 4",
          "Mail = 5",
          "Audio = 6",
          "Location = 7",
          "Voice = 8",
          "Review = 9",
          "Form = 10",
          "System Message = 11",
          "Option = 12",
          "InputData = 13",
          "Contacts = 14",
          "Album = 15",
          "TemplateMessage = 16"
        ]
      },
      "ObjectStatusType": {
        "type": "string",
        "enum": [
          "Open = 1",
          "Resolved = 2",
          "Forward = 3",
          "Irrelevant = 4",
          "Deleted = 5",
          "Forward Reply = 6",
          "Draft = 7",
          "In Process = 8",
          "Scheduled = 9",
          "Follow Up = 10",
          "Automated = 11",
          "Sent = 13",
          "Archive = 14",
          "Pending = 15"
        ]
      },
      "StreamProviderType": {
        "type": "string",
        "enum": [
          "Commbox = 0",
          "Facebook = 1",
          "Twitter = 2",
          "YouTube = 3",
          "Mail = 4",
          "Telephone = 5",
          "Anonymous = 6",
          "WhatsApp = 7",
          "Web = 8",
          "AppleAppStore = 9",
          "Instagram= 10",
          "Google = 11",
          "Telegram= 12",
          "GoogleMyBusiness = 13",
          "Microsoft365 = 14",
          "Gmail = 15",
          "WhatsAppCloud = 16",
          "Salesforce = 17"
        ]
      },
      "ObjectActivityType": {
        "type": "string",
        "enum": [
          "Remark = 1",
          "StatusChange = 2",
          "Forward = 3",
          "ForwardReply = 4",
          "StreamChange = 5",
          "AssignChange = 6",
          "UpdateObjectTag = 7",
          "FollowUp = 8",
          "UpdateObjectIntent = 9",
          "Attachment = 10",
          "RuleExecuted = 11",
          "Custom = 12",
          "UpdateObjectPublicity = 13",
          "Debug = 14",
          "InvalidExtensionFile = 15",
          "InvalidFileSize = 16",
          "DisallowedFileUpload = 17",
          "InactivityLogout = 18",
          "ParticipantChange = 19",
          "TargetStreamChange = 20",
          "ConversationSummary = 21",
          "LogError = 22",
          "RedactChild = 23"
        ]
      },
      "ModuleType": {
        "type": "string",
        "enum": [
          "GENERAL = 0",
          "CUSTOMER_SERVICE = 1",
          "FACEBOOK_PAGE_CONNECTOR = 3",
          "STATIC_CONTENT = 4",
          "CONTEST = 5",
          "MAILBOX_CONNECTOR = 6",
          "YOUTUBE_CONNECTOR = 7",
          "TWITTER_CONNECTOR = 8",
          "CHAT = 9",
          "WEB_SYNDICATION_CONNECTOR = 10",
          "FACEBOOK_MONITOR_CONNECTOR = 11",
          "WHATSAPP = 13",
          "SMS = 14",
          "VOICE = 15",
          "SSO = 16,",
          "MANAGE_CLIENT_CUSTOMIZATIONS = 17",
          "APPLE_APPSTORE_REVIEWS = 18",
          "GOOGLE_PLAY_REVIEWS = 19",
          "INSTAGRAM_CONNECTOR = 20",
          "CONTACT_US = 21",
          "INTERACTIVE_NAVIGATOR = 25",
          "WEBRTC_VIDEO_CHAT = 26",
          "WEBRTC_AUDIO_CHAT = 27",
          "FORMS = 28",
          "CUSTOMER_VERIFICATION = 29",
          "DYNAMICS_CRM_CONNECTOR = 31",
          "CUSTOM_FIELDS = 32",
          "RIGHTNOW_CRM = 33",
          "RULES = 34",
          "EXTERNAL_CONTACTS = 35",
          "WORKING_HOURS = 36",
          "CUSTOM = 37",
          "FACEBOOK_MESSENGER = 38",
          "MAINTENANCE = 39",
          "PRIVACY_AND_SECURITY = 40",
          "AUTO_ASSIGN = 41",
          "TWO_FACTOR_AUTHENTICATION = 42",
          "THEMES = 43",
          "TELEGRAM = 44",
          "GOOGLE_MY_BUSINESS = 45",
          "SAP_CRM = 46",
          "SLA = 47",
          "PUSH_NOTIFICATIONS = 48",
          "SYS_AID = 49",
          "WORKFLOW = 50",
          "INSTAGRAM_DM = 52",
          "PRIORITY = 53",
          "JIRA = 54",
          "GOOGLE_BUSINESS_MESSAGES = 55",
          "BI_CUSTOM_REPORTS = 57",
          "SALESFORCE = 58",
          "AI_ASSISTANT = 59",
          "API = 60",
          "Zendesk = 61",
          "Teams = 65",
          "Hupspot = 71"
        ]
      }
    }
  }
}
